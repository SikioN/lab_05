Index: src/main/java/ru/sikion/commandManager/commands/RemoveByIdCommand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.sikion.commandManager.commands;\r\n\r\nimport ru.sikion.exceptions.WrongAmountOfArgumentsException;\r\nimport ru.sikion.main.Utilities;\r\nimport ru.sikion.models.Worker;\r\nimport ru.sikion.models.handlers.CollectionHandler;\r\nimport ru.sikion.models.handlers.WorkerHandler;\r\n\r\nimport java.util.HashSet;\r\nimport java.util.Objects;\r\n\r\n/**\r\n * Removes element from collection by id.\r\n *\r\n * @since 1.0\r\n * @author Sikion\r\n */\r\npublic class RemoveByIdCommand implements BaseCommand {\r\n\r\n    @Override\r\n    public String getName() {\r\n        return \"remove_by_id\";\r\n    }\r\n\r\n    @Override\r\n    public String getDescr() {\r\n        return \"Removes element from collection by id.\";\r\n    }\r\n    @Override\r\n    public String getArgs() {\r\n        return \"id\";\r\n    }\r\n    @Override\r\n    public void execute(String[] args) throws WrongAmountOfArgumentsException {\r\n        Utilities.checkArgumentsOrThrow(args.length, 1);\r\n\r\n        CollectionHandler<HashSet<Worker>, Worker> collectionHandler = WorkerHandler.getInstance();\r\n\r\n        Long finalId = Utilities.handleUserInputID(args[1]);\r\n        if (finalId == null) return;\r\n\r\n        collectionHandler.getCollection().removeIf(worker -> Objects.equals(worker.getId(), finalId));\r\n\r\n        System.out.println(\"Executed.\");\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/sikion/commandManager/commands/RemoveByIdCommand.java b/src/main/java/ru/sikion/commandManager/commands/RemoveByIdCommand.java
--- a/src/main/java/ru/sikion/commandManager/commands/RemoveByIdCommand.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ b/src/main/java/ru/sikion/commandManager/commands/RemoveByIdCommand.java	(date 1682575858095)
@@ -4,7 +4,7 @@
 import ru.sikion.main.Utilities;
 import ru.sikion.models.Worker;
 import ru.sikion.models.handlers.CollectionHandler;
-import ru.sikion.models.handlers.WorkerHandler;
+import ru.sikion.models.handlers.WorkersHandler;
 
 import java.util.HashSet;
 import java.util.Objects;
@@ -34,9 +34,9 @@
     public void execute(String[] args) throws WrongAmountOfArgumentsException {
         Utilities.checkArgumentsOrThrow(args.length, 1);
 
-        CollectionHandler<HashSet<Worker>, Worker> collectionHandler = WorkerHandler.getInstance();
+        CollectionHandler<HashSet<Worker>, Worker> collectionHandler = WorkersHandler.getInstance();
 
-        Long finalId = Utilities.handleUserInputID(args[1]);
+        Integer finalId = Utilities.handleUserInputID(args[1]);
         if (finalId == null) return;
 
         collectionHandler.getCollection().removeIf(worker -> Objects.equals(worker.getId(), finalId));
Index: src/main/java/ru/sikion/models/Worker.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.sikion.models;\r\n\r\nimport ru.sikion.models.Identity.Status;\r\n\r\nimport java.util.Objects;\r\n\r\n/**\r\n * Model of Worker. Main model of the program. Contains getters/setters of each class fields.\r\n * Some fields have restrictions. It's signed under every method of field.\r\n *\r\n * @author Sikion\r\n * @since 1.0\r\n */\r\npublic class Worker implements Comparable<Worker> {\r\n    private Long id;\r\n    private String name;\r\n    private Coordinates coordinates;\r\n    private java.util.Date creationDate;\r\n    private Double salary;\r\n    private java.util.Date startDate;\r\n    private java.time.ZonedDateTime endDate;\r\n    private Status status;\r\n    private Person person;\r\n\r\n    /**\r\n     * Restrictions: Field cannot be null. The value of this field should be unique, greater than 0 and automatically generated.\r\n     *\r\n     * @return id of the worker\r\n     */\r\n    public Long getId() {\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * Restrictions: Field cannot be null. String must not be empty.\r\n     *\r\n     * @return Name of the worker\r\n     */\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    /**\r\n     * Restrictions: Field cannot be null.\r\n     *\r\n     * @return Coordinates of the worker\r\n     */\r\n    public Coordinates getCoordinates() {\r\n        return coordinates;\r\n    }\r\n\r\n    /**\r\n     * Restrictions: Field cannot be null and the value of this field should be automatically generated.\r\n     *\r\n     * @return Creation date of the worker\r\n     */\r\n    public java.util.Date getCreationDate() {\r\n        return creationDate;\r\n    }\r\n\r\n    /**\r\n     * Restrictions: Field can be null. Value of this field should be greater than 0.\r\n     *\r\n     * @return Salary of the worker\r\n     */\r\n    public Double getSalary() {\r\n        return salary;\r\n    }\r\n\r\n    /**\r\n     * Restrictions: Field cannot be null.\r\n     *\r\n     * @return Start date of the worker\r\n     */\r\n    public java.util.Date getStartDate() {\r\n        return startDate;\r\n    }\r\n\r\n    /**\r\n     * Restrictions: Field can be null.\r\n     *\r\n     * @return End date of the worker\r\n     */\r\n    public java.time.ZonedDateTime getEndDate() {\r\n        return endDate;\r\n    }\r\n\r\n    /**\r\n     * Restrictions: Field can be null.\r\n     *\r\n     * @return Status of the worker\r\n     */\r\n    public Status getStatus() {\r\n        return status;\r\n    }\r\n\r\n    /**\r\n     * Restrictions: Field can be null.\r\n     *\r\n     * @return Person of the worker\r\n     */\r\n    public Person getPerson() {\r\n        return person;\r\n    }\r\n\r\n    /**\r\n     * Restrictions: Field cannot be null. The value of this field should be unique, greater than 0 and automatically generated.\r\n     *\r\n     * @param id value of field id\r\n     */\r\n    public void setId(Long id) {\r\n        this.id = id;\r\n    }\r\n\r\n    /**\r\n     * Restrictions: Field cannot be null. String must not be empty.\r\n     *\r\n     * @param name value of field name\r\n     */\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    /**\r\n     * Restrictions: Field cannot be null.\r\n     *\r\n     * @param coordinates value of field coordinates\r\n     */\r\n    public void setCoordinates(Coordinates coordinates) {\r\n        this.coordinates = coordinates;\r\n    }\r\n\r\n    /**\r\n     * Restrictions: Field can be null. Value of this field should be greater than 0.\r\n     *\r\n     * @param salary of value field salary\r\n     */\r\n    public void setSalary(Double salary) {\r\n        this.salary = salary;\r\n    }\r\n\r\n    /**\r\n     * Restrictions: Field cannot be null.\r\n     *\r\n     * @param startDate of value field startDate\r\n     */\r\n    public void setStartDate(java.util.Date startDate) {\r\n        this.startDate = startDate;\r\n    }\r\n\r\n    /**\r\n     * Restrictions: Field can be null.\r\n     *\r\n     * @param endDate of value field endDate\r\n     */\r\n    public void setEndDate(java.time.ZonedDateTime endDate) {\r\n        this.endDate = endDate;\r\n    }\r\n\r\n    /**\r\n     * Restrictions: Field can be null.\r\n     *\r\n     * @param status of value field status\r\n     */\r\n    public void setStatus(Status status) {\r\n        this.status = status;\r\n    }\r\n\r\n    /**\r\n     * Restrictions: Field can be null.\r\n     *\r\n     * @param person of value field person\r\n     */\r\n    public void setPerson(Person person) {\r\n        this.person = person;\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (this == o) return true;\r\n        if (!(o instanceof Worker worker)) return false;\r\n        return Objects.equals(getId(), worker.getId()) && Objects.equals(getName(), worker.getName()) && Objects.equals(getCoordinates(), worker.getCoordinates()) && Objects.equals(getCreationDate(), worker.getCreationDate()) && Objects.equals(getSalary(), worker.getSalary()) && Objects.equals(getStartDate(), worker.getStartDate()) && Objects.equals(getEndDate(), worker.getEndDate()) && getStatus() == worker.getStatus() && Objects.equals(getPerson(), worker.getPerson());\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        return Objects.hash(getId(), getName(), getCoordinates(), getCreationDate(), getSalary(), getStartDate(), getEndDate(), getStatus(), getPerson());\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"Worker{\" +\r\n                \"id=\" + id +\r\n                \", name='\" + name + '\\'' +\r\n                \", coordinates=\" + coordinates +\r\n                \", creationDate=\" + creationDate +\r\n                \", salary=\" + salary +\r\n                \", startDate=\" + startDate +\r\n                \", endDate=\" + endDate +\r\n                \", status=\" + status +\r\n                \", person=\" + person +\r\n                '}';\r\n    }\r\n\r\n    @Override\r\n    public int compareTo(Worker o) {\r\n        return 0;\r\n    }\r\n\r\n\r\n//    @Override\r\n//    public int compareTo(Worker o) {\r\n//        if (o == null) return 1;\r\n//        if (o.id == null) return -1;\r\n//        if (this.distance - o.distance < 0)\r\n//            return -1;\r\n//        else if (this.distance == o.distance)\r\n//            return 0;\r\n//        else\r\n//            return 1;\r\n//    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/sikion/models/Worker.java b/src/main/java/ru/sikion/models/Worker.java
--- a/src/main/java/ru/sikion/models/Worker.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ b/src/main/java/ru/sikion/models/Worker.java	(date 1682575721957)
@@ -2,6 +2,8 @@
 
 import ru.sikion.models.Identity.Status;
 
+import java.time.LocalDate;
+import java.util.Date;
 import java.util.Objects;
 
 /**
@@ -12,13 +14,13 @@
  * @since 1.0
  */
 public class Worker implements Comparable<Worker> {
-    private Long id;
+    private int id;
     private String name;
     private Coordinates coordinates;
     private java.util.Date creationDate;
     private Double salary;
     private java.util.Date startDate;
-    private java.time.ZonedDateTime endDate;
+    private java.time.LocalDate endDate;
     private Status status;
     private Person person;
 
@@ -27,7 +29,7 @@
      *
      * @return id of the worker
      */
-    public Long getId() {
+    public int getId() {
         return id;
     }
 
@@ -81,7 +83,7 @@
      *
      * @return End date of the worker
      */
-    public java.time.ZonedDateTime getEndDate() {
+    public LocalDate getEndDate() {
         return endDate;
     }
 
@@ -108,7 +110,7 @@
      *
      * @param id value of field id
      */
-    public void setId(Long id) {
+    public void setId(int id) {
         this.id = id;
     }
 
@@ -153,7 +155,7 @@
      *
      * @param endDate of value field endDate
      */
-    public void setEndDate(java.time.ZonedDateTime endDate) {
+    public void setEndDate(java.time.LocalDate endDate) {
         this.endDate = endDate;
     }
 
@@ -175,6 +177,16 @@
         this.person = person;
     }
 
+    /**
+     * Restrictions: Field cannot be null. The value of this field should be automatically generated.
+     *
+     * @param creationDate of value field creationDate
+     */
+    public void setCreationDate(Date creationDate) {
+        this.creationDate = creationDate;
+    }
+
+
     @Override
     public boolean equals(Object o) {
         if (this == o) return true;
@@ -187,6 +199,7 @@
         return Objects.hash(getId(), getName(), getCoordinates(), getCreationDate(), getSalary(), getStartDate(), getEndDate(), getStatus(), getPerson());
     }
 
+
     @Override
     public String toString() {
         return "Worker{" +
Index: src/main/java/ru/sikion/main/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.sikion.main;\r\n\r\nimport ru.sikion.commandManager.CommandExecutor;\r\nimport ru.sikion.commandManager.CommandMode;\r\nimport ru.sikion.fileLogic.Loader;\r\nimport ru.sikion.models.Worker;\r\nimport ru.sikion.models.handlers.CollectionHandler;\r\nimport ru.sikion.models.handlers.WorkerHandler;\r\n\r\nimport java.util.HashSet;\r\n\r\n/**\r\n * Program entry point class. Contains main() method.\r\n * This program is managing collection of type <code>HashSet&#8249;Route></code>\r\n *\r\n * @since 1.0\r\n * @author Sikion\r\n */\r\npublic class Main {\r\n\r\n    /**\r\n     * Environment key to XML file for store collection.\r\n     */\r\n    public static final String ENV_KEY = \"lab5\";\r\n\r\n    /**\r\n     * Program entry point.\r\n     * @param args Command-line arguments\r\n     */\r\n    public static void main(String[] args) {\r\n        CollectionHandler<HashSet<Worker>, Worker> handler = WorkerHandler.getInstance();\r\n\r\n        // load collection\r\n        Loader<HashSet<Worker>, Worker> loader = new Loader<>(handler.getCollection().getClass(), Worker.class);\r\n        handler.setCollection(loader.loadFromXMLbyEnvKey(ENV_KEY));\r\n        System.out.println(\"Loaded \" + handler.getCollection().size() + \" elements total.\");\r\n        System.out.println();\r\n\r\n        // commands\r\n        System.out.println(\"Welcome to CLI! Now you are operating with collection of type \" + handler.getCollection().getClass().getName() + \", filled with elements of type \" + handler.getFirstOrNew().getClass().getName());\r\n        System.out.println(\"Now you can enter the commands. Use help for reference.\");\r\n        CommandExecutor executor = new CommandExecutor();\r\n        executor.startExecuting(System.in, CommandMode.CLI_UserMode);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/sikion/main/Main.java b/src/main/java/ru/sikion/main/Main.java
--- a/src/main/java/ru/sikion/main/Main.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ b/src/main/java/ru/sikion/main/Main.java	(date 1682571292137)
@@ -5,7 +5,7 @@
 import ru.sikion.fileLogic.Loader;
 import ru.sikion.models.Worker;
 import ru.sikion.models.handlers.CollectionHandler;
-import ru.sikion.models.handlers.WorkerHandler;
+import ru.sikion.models.handlers.WorkersHandler;
 
 import java.util.HashSet;
 
@@ -28,7 +28,7 @@
      * @param args Command-line arguments
      */
     public static void main(String[] args) {
-        CollectionHandler<HashSet<Worker>, Worker> handler = WorkerHandler.getInstance();
+        CollectionHandler<HashSet<Worker>, Worker> handler = WorkersHandler.getInstance();
 
         // load collection
         Loader<HashSet<Worker>, Worker> loader = new Loader<>(handler.getCollection().getClass(), Worker.class);
Index: lab_05-PreFinal/src/main/java/ru/sikion/fileLogic/CSVReader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/fileLogic/CSVReader.java b/src/main/java/ru/sikion/fileLogic/XMLReader.java
rename from lab_05-PreFinal/src/main/java/ru/sikion/fileLogic/CSVReader.java
rename to src/main/java/ru/sikion/fileLogic/XMLReader.java
--- a/lab_05-PreFinal/src/main/java/ru/sikion/fileLogic/CSVReader.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ b/src/main/java/ru/sikion/fileLogic/XMLReader.java	(date 1682576077368)
@@ -15,7 +15,7 @@
  * @since 1.0
  * @author Sikion
  */
-public class CSVReader implements BaseReader {
+public class XMLReader implements BaseReader {
 
     private static final Logger myLogger = Logger.getLogger("com.github.Sikion.lab5");
     private final LinkedHashMap<String[], String> resultParsing;
@@ -27,7 +27,7 @@
     /**
      * Default constructor of XMLReader.
      */
-    public CSVReader()
+    public XMLReader()
     {
         resultParsing = new LinkedHashMap<>();
         values = new ArrayDeque<>();
Index: src/main/java/ru/sikion/META-INF/MANIFEST.MF
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Manifest-Version: 1.0\r\nMain-Class: Main\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/sikion/META-INF/MANIFEST.MF b/src/main/java/ru/sikion/META-INF/MANIFEST.MF
--- a/src/main/java/ru/sikion/META-INF/MANIFEST.MF	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ b/src/main/java/ru/sikion/META-INF/MANIFEST.MF	(date 1682576303490)
@@ -1,3 +1,3 @@
 Manifest-Version: 1.0
-Main-Class: Main
+Main-Class: ru.sikion.main.Main
 
Index: src/main/java/ru/sikion/models/comparators/RouteComparator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/sikion/models/comparators/RouteComparator.java b/src/main/java/ru/sikion/models/comparators/WorkerComparator.java
rename from src/main/java/ru/sikion/models/comparators/RouteComparator.java
rename to src/main/java/ru/sikion/models/comparators/WorkerComparator.java
--- a/src/main/java/ru/sikion/models/comparators/RouteComparator.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ b/src/main/java/ru/sikion/models/comparators/WorkerComparator.java	(date 1682576193546)
@@ -10,7 +10,7 @@
  * @author Sikion
  * @since 1.0
  */
-public class RouteComparator implements Comparator<Worker> {
+public class WorkerComparator implements Comparator<Worker> {
     @Override
     public int compare(Worker o1, Worker o2) {
         return Long.compare(o1.getId(), o2.getId());
Index: src/main/java/ru/sikion/models/handlers/nonUserMode/RouteNonCLIHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.sikion.models.handlers.nonUserMode;\r\n\r\nimport ru.sikion.exceptions.BuildObjectException;\r\nimport ru.sikion.models.Coordinates;\r\nimport ru.sikion.models.Worker;\r\nimport ru.sikion.models.handlers.ModuleHandler;\r\nimport ru.sikion.models.handlers.WorkerHandler;\r\nimport ru.sikion.models.validators.WorkerValidator;\r\nimport ru.sikion.models.validators.Validator;\r\n\r\nimport java.time.Instant;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.Scanner;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\n\r\n/**\r\n * Implementation of Worker ModelHandler for non-User Mode.\r\n *\r\n * @since 1.1\r\n * @author Sikion\r\n */\r\npublic class RouteNonCLIHandler implements ModuleHandler<Worker> {\r\n\r\n    private static final Logger myLogger = Logger.getLogger(\"com.github.Sikion.lab5\");\r\n\r\n    Scanner scanner;\r\n\r\n    /**\r\n     * Constructor for setup handler's scanner.\r\n     *\r\n     * @param scanner Command scanner for reading argument\r\n     */\r\n    public RouteNonCLIHandler(Scanner scanner) {\r\n        this.scanner = scanner;\r\n    }\r\n\r\n    @Override\r\n    public Worker buildObject() throws BuildObjectException {\r\n        System.out.println(\"Generating object...\");\r\n        Worker result = new Worker();\r\n        int valuesToRead = 12;\r\n        int coordsIndex = 1;\r\n        int fromIndex = 3;\r\n        int toIndex = 7;\r\n        ArrayList<String> values = new ArrayList<>(valuesToRead);\r\n\r\n        for (int i = 0; i < valuesToRead && scanner.hasNextLine(); i++)\r\n        {\r\n            String line = scanner.nextLine();\r\n            if (!line.isEmpty())\r\n                values.add(line);\r\n            else\r\n            {\r\n                values.add(null);\r\n\r\n                if (i == coordsIndex)\r\n                {\r\n                    valuesToRead -= 1;\r\n                    fromIndex -= 1;\r\n                    toIndex -= 1;\r\n                }\r\n\r\n                if (i == fromIndex)\r\n                {\r\n                    valuesToRead -= 3;\r\n                    toIndex -= 3;\r\n                }\r\n\r\n                if (i == toIndex)\r\n                {\r\n                    valuesToRead -= 3;\r\n                }\r\n            }\r\n        }\r\n\r\n        try {\r\n            result.setId(WorkerHandler.generateID());\r\n            result.setName(values.get(0));\r\n            System.out.println(\"Name: \" + result.getName());\r\n            if (values.get(coordsIndex) != null) {\r\n                System.out.println(\"Generating coordinates...\");\r\n                Coordinates coordinates = new Coordinates();\r\n                coordinates.setX(Double.parseDouble(values.get(coordsIndex)));\r\n                System.out.println(\"Coords X: \" + coordinates.getX());\r\n                coordinates.setY(Float.valueOf(values.get(coordsIndex + 1)));\r\n                System.out.println(\"Coords Y: \" + coordinates.getY());\r\n                result.setCoordinates(coordinates);\r\n            }\r\n            System.out.println(\"Coords: \" + result.getCoordinates());\r\n            result.setFrom(generateLocation(fromIndex, values));\r\n            System.out.println(\"From: \" + result.getFrom());\r\n            result.setTo(generateLocation(toIndex, values));\r\n            System.out.println(\"To: \" + result.getTo());\r\n            result.setDistance(Integer.parseInt(values.get(values.size() - 1)));\r\n            System.out.println(\"Distance: \" + result.getDistance());\r\n            result.setCreationDate(Date.from(Instant.now()));\r\n            System.out.println(\"Generated at: \" + result.getCreationDate());\r\n            System.out.println(\"Object generated! Validating result...\");\r\n\r\n            Validator<Worker> validator = new WorkerValidator();\r\n            if (!validator.validate(result))\r\n            {\r\n                System.out.println(\"Object's invalid, skipping...\");\r\n                throw new BuildObjectException(\"Созданный элемент нарушает ограничения и не может быть добавлен в коллекцию!\");\r\n            }\r\n            System.out.println(\"Validate successful! Sending result...\");\r\n\r\n            return result;\r\n\r\n        } catch (NumberFormatException | NullPointerException e)\r\n        {\r\n            myLogger.log(Level.WARNING, \"Объект будет пропущен. Устраните ошибку в скрипте и повторите попытку.\");\r\n            throw new BuildObjectException(\"Предоставленные данные для построения объекта неверны. Воспользуйтесь ручным вводом или исправьте команду в скрипте.\");\r\n        }\r\n    }\r\n\r\n    private Location generateLocation(int toIndex, ArrayList<String> values) {\r\n        Location obj = null;\r\n        if (values.get(toIndex) != null)\r\n        {\r\n            System.out.println(\"Generating location...\");\r\n            obj = new Location();\r\n            obj.setX(Float.parseFloat(values.get(toIndex)));\r\n            System.out.println(\"X: \" + obj.getX());\r\n            obj.setY(Long.valueOf(values.get(toIndex + 1)));\r\n            System.out.println(\"Y: \" + obj.getX());\r\n            obj.setZ(Long.valueOf(values.get(toIndex + 2)));\r\n            System.out.println(\"Z: \" + obj.getX());\r\n            obj.setName(values.get(toIndex + 3));\r\n            System.out.println(\"Name:\" + obj.getName());\r\n        }\r\n        return obj;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/sikion/models/handlers/nonUserMode/RouteNonCLIHandler.java b/src/main/java/ru/sikion/models/handlers/nonUserMode/RouteNonCLIHandler.java
--- a/src/main/java/ru/sikion/models/handlers/nonUserMode/RouteNonCLIHandler.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ b/src/main/java/ru/sikion/models/handlers/nonUserMode/RouteNonCLIHandler.java	(date 1682575847263)
@@ -4,7 +4,7 @@
 import ru.sikion.models.Coordinates;
 import ru.sikion.models.Worker;
 import ru.sikion.models.handlers.ModuleHandler;
-import ru.sikion.models.handlers.WorkerHandler;
+import ru.sikion.models.handlers.WorkerHandlers;
 import ru.sikion.models.validators.WorkerValidator;
 import ru.sikion.models.validators.Validator;
 
@@ -76,26 +76,26 @@
         }
 
         try {
-            result.setId(WorkerHandler.generateID());
+            result.setId(WorkerHandlers.generateID());
             result.setName(values.get(0));
             System.out.println("Name: " + result.getName());
             if (values.get(coordsIndex) != null) {
                 System.out.println("Generating coordinates...");
                 Coordinates coordinates = new Coordinates();
-                coordinates.setX(Double.parseDouble(values.get(coordsIndex)));
+//                coordinates.setX(Double.parseDouble(values.get(coordsIndex)));
                 System.out.println("Coords X: " + coordinates.getX());
                 coordinates.setY(Float.valueOf(values.get(coordsIndex + 1)));
                 System.out.println("Coords Y: " + coordinates.getY());
                 result.setCoordinates(coordinates);
             }
             System.out.println("Coords: " + result.getCoordinates());
-            result.setFrom(generateLocation(fromIndex, values));
-            System.out.println("From: " + result.getFrom());
-            result.setTo(generateLocation(toIndex, values));
-            System.out.println("To: " + result.getTo());
-            result.setDistance(Integer.parseInt(values.get(values.size() - 1)));
-            System.out.println("Distance: " + result.getDistance());
-            result.setCreationDate(Date.from(Instant.now()));
+//            result.setFrom(generateLocation(fromIndex, values));
+//            System.out.println("From: " + result.getFrom());
+//            result.setTo(generateLocation(toIndex, values));
+//            System.out.println("To: " + result.getTo());
+//            result.setDistance(Integer.parseInt(values.get(values.size() - 1)));
+//            System.out.println("Distance: " + result.getDistance());
+//            result.setCreationDate(Date.from(Instant.now()));
             System.out.println("Generated at: " + result.getCreationDate());
             System.out.println("Object generated! Validating result...");
 
@@ -116,21 +116,21 @@
         }
     }
 
-    private Location generateLocation(int toIndex, ArrayList<String> values) {
-        Location obj = null;
-        if (values.get(toIndex) != null)
-        {
-            System.out.println("Generating location...");
-            obj = new Location();
-            obj.setX(Float.parseFloat(values.get(toIndex)));
-            System.out.println("X: " + obj.getX());
-            obj.setY(Long.valueOf(values.get(toIndex + 1)));
-            System.out.println("Y: " + obj.getX());
-            obj.setZ(Long.valueOf(values.get(toIndex + 2)));
-            System.out.println("Z: " + obj.getX());
-            obj.setName(values.get(toIndex + 3));
-            System.out.println("Name:" + obj.getName());
-        }
-        return obj;
-    }
+//    private Location generateLocation(int toIndex, ArrayList<String> values) {
+//        Location obj = null;
+//        if (values.get(toIndex) != null)
+//        {
+//            System.out.println("Generating location...");
+//            obj = new Location();
+//            obj.setX(Float.parseFloat(values.get(toIndex)));
+//            System.out.println("X: " + obj.getX());
+//            obj.setY(Long.valueOf(values.get(toIndex + 1)));
+//            System.out.println("Y: " + obj.getX());
+//            obj.setZ(Long.valueOf(values.get(toIndex + 2)));
+//            System.out.println("Z: " + obj.getX());
+//            obj.setName(values.get(toIndex + 3));
+//            System.out.println("Name:" + obj.getName());
+//        }
+//        return obj;
+//    }
 }
Index: lab_05-PreFinal/src/main/java/ru/sikion/fileLogic/CSVWriter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/fileLogic/CSVWriter.java b/src/main/java/ru/sikion/fileLogic/XMLWriter.java
rename from lab_05-PreFinal/src/main/java/ru/sikion/fileLogic/CSVWriter.java
rename to src/main/java/ru/sikion/fileLogic/XMLWriter.java
--- a/lab_05-PreFinal/src/main/java/ru/sikion/fileLogic/CSVWriter.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ b/src/main/java/ru/sikion/fileLogic/XMLWriter.java	(date 1682576077378)
@@ -15,7 +15,7 @@
  * @since 1.0
  * @author Sikion
  */
-public class CSVWriter implements BaseWriter {
+public class XMLWriter implements BaseWriter {
 
     private static final Logger myLogger = Logger.getLogger("com.github.Sikion.lab5");
 
Index: lab_05-PreFinal/src/main/java/ru/sikion/models/handlers/WorkersHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/models/handlers/WorkersHandler.java b/src/main/java/ru/sikion/models/handlers/WorkersHandler.java
rename from lab_05-PreFinal/src/main/java/ru/sikion/models/handlers/WorkersHandler.java
rename to src/main/java/ru/sikion/models/handlers/WorkersHandler.java
--- a/lab_05-PreFinal/src/main/java/ru/sikion/models/handlers/WorkersHandler.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ b/src/main/java/ru/sikion/models/handlers/WorkersHandler.java	(date 1682576193533)
@@ -8,14 +8,14 @@
 import java.util.*;
 
 /**
- * Current implementation of CollectionsHandler for HashSet of Worker.
+ * Current implementation of CollectionsHandler for TreeMap of Worker.
  *
  * @since 1.0
  * @author Sikion
  */
 public class WorkersHandler implements CollectionHandler<HashSet<Worker>, Worker> {
 
-    private static WorkersHandler singletonMoment;
+    private static WorkersHandler singletoneMoment;
 
     private HashSet<Worker> workers;
     private final Date initDate;
@@ -31,9 +31,9 @@
      * @return Single instance of handler.
      */
     public static WorkersHandler getInstance() {
-        if (singletonMoment == null)
-            singletonMoment = new WorkersHandler();
-        return singletonMoment;
+        if (singletoneMoment == null)
+            singletoneMoment = new WorkersHandler();
+        return singletoneMoment;
     }
 
     /**
@@ -77,11 +77,11 @@
     }
 
     /**
-     * Sorts elements by ID Field in Worker.
+     * Sorts elements by ID Field in Route.
      */
     @Override
     public void sort() {
-        HashSet sorted = new HashSet<>();
+        HashSet<Worker> sorted = new HashSet<>();
 
         for (Iterator<Worker> it = workers.stream().sorted(new WorkerComparator()).iterator(); it.hasNext(); ) {
             Worker sortedItem = it.next();
@@ -144,26 +144,5 @@
         }
     }
 
-    /**
-     * Gets min element by given comparator
-     *
-     * @param comparator Comparator to compare.
-     * @return Min element or null if collection is empty
-     */
-    @Override
-    public Worker getMin(Comparator<Worker> comparator) {
 
-        return getCollection().stream().min(comparator).orElse(null);
-    }
-
-    /**
-     * Gets max element by given comparator
-     *
-     * @param comparator Comparator to compare.
-     * @return Max element or null if collection is empty
-     */
-    @Override
-    public Worker getMax(Comparator<Worker> comparator) {
-        return getCollection().stream().max(comparator).orElse(null);
-    }
 }
Index: lab_05-PreFinal/src/main/java/ru/sikion/exceptions/CommandInterruptedException.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/exceptions/CommandInterruptedException.java b/lab_05-PreFinal/src/main/java/ru/sikion/exceptions/CommandInterruptedException.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/exceptions/CommandInterruptedException.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,8 +0,0 @@
-package ru.sikion.exceptions;
-
-public class CommandInterruptedException extends RuntimeException {
-    public CommandInterruptedException(Exception cause)
-    {
-        super(cause);
-    }
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/models/validators/StartDateValidator.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/StartDateValidator.java b/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/StartDateValidator.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/StartDateValidator.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,22 +0,0 @@
-package ru.sikion.models.validators;
-
-import java.util.Date;
-
-/**
- * Start date validator. Checks if start instance of Date.
- *
- * @author Sikion
- * @version 1.0
- */
-public class StartDateValidator implements Validator<Date> {
-    /**
-     * Validates start date.
-     *
-     * @param value start date to validate
-     * @return true if instance of Date. Otherwise, false.
-     */
-    @Override
-    public boolean validate(Date value) {
-        return true;
-    }
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/ClearCommand.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/ClearCommand.java b/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/ClearCommand.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/ClearCommand.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,34 +0,0 @@
-package ru.sikion.commandManager.commands;
-
-import ru.sikion.models.Worker;
-import ru.sikion.models.handlers.CollectionHandler;
-import ru.sikion.models.handlers.WorkersHandler;
-
-import java.util.HashSet;
-
-/**
- * Clears collection
- *
- * @since 1.0
- * @author Sikion
- */
-public class ClearCommand implements BaseCommand {
-    @Override
-    public String getName() {
-        return "clear";
-    }
-
-    @Override
-    public String getDescr() {
-        return "Clears collection";
-    }
-
-    @Override
-    public void execute(String[] args) {
-        CollectionHandler<HashSet<Worker>, Worker> collectionHandler = WorkersHandler.getInstance();
-
-        collectionHandler.clearCollection();
-
-        System.out.println("Cleared!");
-    }
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/models/handlers/WorkerHandlers.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/models/handlers/WorkerHandlers.java b/lab_05-PreFinal/src/main/java/ru/sikion/models/handlers/WorkerHandlers.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/models/handlers/WorkerHandlers.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,41 +0,0 @@
-package ru.sikion.models.handlers;
-
-import ru.sikion.models.Worker;
-import ru.sikion.models.validators.IdValidator;
-import ru.sikion.models.validators.Validator;
-
-import java.util.HashSet;
-import java.util.concurrent.ThreadLocalRandom;
-
-/**
- * Utility class for handling Worker objects. Contains static methods.
- *
- * @since 1.1
- * @author Sikion
- */
-public class WorkerHandlers {
-
-    /**
-     * Generates unique ID for Worker Object.
-     *
-     * @return value for ID field.
-     */
-    public static Integer generateID()
-    {
-        CollectionHandler<HashSet<Worker>, Worker> handler = WorkersHandler.getInstance();
-        // id
-        Validator<Integer> idValidator = new IdValidator();
-        var lastObj = handler.getLastElement();
-        int lastId = 2147483647;
-        if (lastObj != null)
-        {
-            lastId = lastObj.getId() + 1;
-        }
-        while (!idValidator.validate(lastId))
-        {
-            lastId = ThreadLocalRandom.current().nextInt(1, Integer.MAX_VALUE);
-        }
-        System.out.println("ID Field (auto-generated): " + lastId);
-        return lastId;
-    }
-}
Index: src/main/java/ru/sikion/models/handlers/WorkerHandler.java
===================================================================
diff --git a/src/main/java/ru/sikion/models/handlers/WorkerHandler.java b/src/main/java/ru/sikion/models/handlers/WorkerHandler.java
deleted file mode 100644
--- a/src/main/java/ru/sikion/models/handlers/WorkerHandler.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,169 +0,0 @@
-package ru.sikion.models.handlers;
-
-import ru.sikion.models.Worker;
-import ru.sikion.models.comparators.RouteComparator;
-import ru.sikion.models.validators.*;
-
-import java.time.Instant;
-import java.util.*;
-
-/**
- * Current implementation of CollectionsHandler for TreeMap of Worker.
- *
- * @since 1.0
- * @author Sikion
- */
-public class WorkerHandler implements CollectionHandler<TreeMap<Worker>, Worker> {
-
-    private static WorkerHandler singletonMoment;
-
-    private TreeMap workers;
-    private final Date initDate;
-
-    private WorkerHandler() {
-        workers = new TreeMap<>();
-        initDate = Date.from(Instant.now());
-    }
-
-    /**
-     * Singletone moment.
-     *
-     * @return Single instance of handler.
-     */
-    public static WorkerHandler getInstance() {
-        if (singletonMoment == null)
-            singletonMoment = new WorkerHandler();
-        return singletonMoment;
-    }
-
-    /**
-     * Returns actual collection reference.
-     *
-     * @return Current collection
-     */
-    @Override
-    public TreeMap<Worker> getCollection()
-    {
-        return workers;
-    }
-
-    /**
-     * Overrides current collection by provided value.
-     *
-     * @param workers Collection
-     */
-    @Override
-    public void setCollection(TreeMap<Worker> workers) {
-        this.workers = workers;
-        validateElements();
-        sort();
-    }
-
-    /**
-     * Adds element to collection.
-     *
-     * @param e Element to add
-     */
-    @Override
-    public void addElementToCollection(Worker e)
-    {
-        workers.add(e);
-        sort();
-    }
-
-    @Override
-    public void clearCollection() {
-        workers.clear();
-    }
-
-    /**
-     * Sorts elements by ID Field in Worker.
-     */
-    @Override
-    public void sort() {
-        TreeMap sorted = new TreeMap<>();
-
-        for (Iterator<Worker> it = workers.stream().sorted(new RouteComparator()).iterator(); it.hasNext(); ) {
-            Worker sortedItem = it.next();
-
-            sorted.add(sortedItem);
-        }
-
-        this.workers = sorted;
-    }
-
-    /**
-     * Returns first element of collection.
-     * @return First element of collection. If collection is empty, returns new object.
-     */
-    @Override
-    public Worker getFirstOrNew()
-    {
-        if (workers.iterator().hasNext())
-            return workers.iterator().next();
-        else
-            return new Worker();
-    }
-
-    @Override
-    public Date getInitDate() {
-        return initDate;
-    }
-
-    /**
-     * Returns last element of collection.
-     * @return Last element of collection of null if collection is empty
-     */
-    @Override
-    public Worker getLastElement()
-    {
-        Worker result = null;
-        for (Worker worker : workers) {
-            result = worker;
-        }
-        return result;
-    }
-
-    /**
-     * Validates all elements in collection
-     */
-    @Override
-    public void validateElements() {
-        TreeMap ids = new TreeMap<Long, Object>(getCollection().size());
-
-        for (Iterator<Worker> it = getCollection().iterator(); it.hasNext(); ) {
-            Worker toValid = it.next();
-            Validator<? extends Worker> validator = new WorkerValidator();
-
-            if (!validator.validate(toValid) || !ids.add(toValid.getId()))
-            {
-                it.remove();
-                System.out.println("Element removed from collection: " + toValid);
-                System.out.println("This element violates the restriction of some fields. Check your file and fix it manually.");
-            }
-        }
-    }
-
-    /**
-     * Gets min element by given comparator
-     *
-     * @param comparator Comparator to compare.
-     * @return Min element or null if collection is empty
-     */
-    @Override
-    public Worker getMin(Comparator<Worker> comparator) {
-
-        return getCollection().stream().min(comparator).orElse(null);
-    }
-
-    /**
-     * Gets max element by given comparator
-     *
-     * @param comparator Comparator to compare.
-     * @return Max element or null if collection is empty
-     */
-    @Override
-    public Worker getMax(Comparator<Worker> comparator) {
-        return getCollection().stream().max(comparator).orElse(null);
-    }
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/models/validators/SalaryValidator.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/SalaryValidator.java b/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/SalaryValidator.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/SalaryValidator.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,20 +0,0 @@
-package ru.sikion.models.validators;
-
-/**
- * Salary validator. Checks if salary is not null and greater than 0.
- *
- * @author Sikion
- * @version 1.0
- */
-public class SalaryValidator implements Validator<Double> {
-    /**
-     * Validates salary.
-     *
-     * @param value salary to validate
-     * @return true if salary is not null and greater than 0. Otherwise, false.
-     */
-    @Override
-    public boolean validate(Double value) {
-        return (value != null && value > 0);
-    }
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/fileLogic/Saver.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/fileLogic/Saver.java b/lab_05-PreFinal/src/main/java/ru/sikion/fileLogic/Saver.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/fileLogic/Saver.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,137 +0,0 @@
-package ru.sikion.fileLogic;
-
-import java.beans.PropertyEditor;
-import java.beans.PropertyEditorManager;
-import java.lang.reflect.Field;
-import java.util.*;
-
-/**
- * Abstract saver class. (Under construction)
- */
-public class Saver<T extends Collection<E>, E> {
-
-
-    private final Class<E> fullClassOfElement;
-
-
-    /**
-     * Initializer of fileLogic.Saver class.
-     *
-     * @param eClass Class of <code>E</code>. Should be provided due to Java's generic types restriction.
-     */
-    public Saver(Class<E> eClass)
-    {
-        fullClassOfElement = eClass;
-    }
-
-    /**
-     * Saves provided collection into file by environment key.
-     *
-     * @param collection Current collection to save
-     * @param envKey Environment key to filepath
-     */
-    public void saveCollection(T collection, String envKey)
-    {
-        String xmlPath = System.getenv(envKey);
-
-        BaseWriter writer = new CSVWriter();
-
-        writer.writeToFile(xmlPath, getValues(collection));
-    }
-
-    LinkedHashMap<String[], String> result;
-    private LinkedHashMap<String[], String> getValues(T collection) {
-        result = new LinkedHashMap<>();
-
-        int iter = 0;
-        for (E obj : collection) {
-            Field[] fields = obj.getClass().getDeclaredFields();
-            //.out.println(Arrays.toString(fields));
-            for (Field field : fields) {
-                try {
-                    ArrayList<String> address = new ArrayList<>();
-                    String[] canonicalNameSplitted = fullClassOfElement.getCanonicalName().toLowerCase().split("\\.");
-                    address.add(canonicalNameSplitted[canonicalNameSplitted.length - 1] + iter);
-                    addToCollection(obj, field, address);
-                } catch (IllegalAccessException ignored) {
-                }
-            }
-            iter++;
-        }
-
-        return result;
-    }
-
-    private void addToCollection(Object obj, Field field, ArrayList<String> currentAddress) throws IllegalAccessException {
-        field.setAccessible(true);
-        Object objValue = field.get(obj);
-
-        if (Wrapper.isWrapperType(field.getType()))
-        {
-            // primitive
-            String value = convert(field.getType(), objValue);
-
-            String fieldNameToAddress = field.getName();
-            currentAddress.add(fieldNameToAddress);
-            String[] address = new String[currentAddress.size()];
-
-            for (int i = 0; i < address.length; i++)
-            {
-                address[i] = currentAddress.get(i);
-            }
-
-            result.put(address, value);
-        }
-        else if (objValue != null)
-        {
-            Field[] fields = field.getType().getDeclaredFields();
-            currentAddress.add(field.getName());
-            for (Field fieldType : fields)
-            {
-                addToCollection(objValue, fieldType, currentAddress);
-                currentAddress.remove(currentAddress.size() - 1);
-            }
-        }
-    }
-
-    private String convert(Class<?> targetType, Object obj) {
-        PropertyEditor editor = PropertyEditorManager.findEditor(targetType);
-        editor.setValue(obj);
-        return editor.getAsText();
-    }
-
-    private static class Wrapper
-    {
-        private static final Set<Class<?>> WRAPPER_TYPES = getWrapperTypes();
-
-        public static boolean isWrapperType(Class<?> clazz)
-        {
-            return WRAPPER_TYPES.contains(clazz);
-        }
-
-        private static Set<Class<?>> getWrapperTypes()
-        {
-            Set<Class<?>> ret = new HashSet<>();
-            ret.add(Boolean.class);
-            ret.add(Character.class);
-            ret.add(Byte.class);
-            ret.add(Short.class);
-            ret.add(Integer.class);
-            ret.add(Long.class);
-            ret.add(Float.class);
-            ret.add(Double.class);
-            ret.add(Void.class);
-            ret.add(Date.class);
-            ret.add(String.class);
-            ret.add(boolean.class);
-            ret.add(char.class);
-            ret.add(byte.class);
-            ret.add(short.class);
-            ret.add(int.class);
-            ret.add(long.class);
-            ret.add(float.class);
-            ret.add(double.class);
-            return ret;
-        }
-    }
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/Utilities.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/Utilities.java b/lab_05-PreFinal/src/main/java/ru/sikion/Utilities.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/Utilities.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,40 +0,0 @@
-package ru.sikion;
-
-import ru.sikion.exceptions.StreamInterruptedException;
-import ru.sikion.exceptions.WrongAmountOfArgumentsException;
-
-import java.util.Scanner;
-
-public class Utilities {
-    public static boolean isNotNumeric(String str) {
-        return !str.matches("-?\\d+(\\.\\d+)?");  //match a number with optional '-' and decimal.
-    }
-
-    public static Long handleUserInputID(String input) {
-        if (Utilities.isNotNumeric(input)) {
-            System.out.println("Provided argument id: \"" + input + "\" is not a number! Try again.");
-            return null;
-        } else if (input.contains(".")) {
-            System.out.println("ID field cannot accept decimal values. Try again.");
-            return null;
-        }
-
-        Long id = null;
-        try {
-            id = Long.valueOf(input);
-        } catch (NumberFormatException e) {
-            System.out.println("Provided argument: \"" + input + "\" is too large for ID field. Try again.");
-        }
-        return id;
-    }
-
-    public static void checkArgumentsOrThrow(int provided, int expected) throws WrongAmountOfArgumentsException {
-        if (provided - 1 != expected)
-            throw new WrongAmountOfArgumentsException("Provided " + (provided - 1) + " arguments, expected " + expected);
-    }
-
-    public static boolean hasNextLineOrThrow(Scanner scanner) throws StreamInterruptedException {
-        if (scanner.hasNextLine()) return true;
-        else throw new StreamInterruptedException("Поток ввода был преждевременно остановлен.");
-    }
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/MANIFEST.MF
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/MANIFEST.MF b/lab_05-PreFinal/src/main/java/ru/sikion/MANIFEST.MF
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/MANIFEST.MF	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,2 +0,0 @@
-Manifest-Version: 1.0
-Main-Class: Main.java
Index: lab_05-PreFinal/src/main/java/ru/sikion/Main.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/Main.java b/lab_05-PreFinal/src/main/java/ru/sikion/Main.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/Main.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,45 +0,0 @@
-package ru.sikion;
-
-import ru.sikion.commandManager.CommandExecutor;
-import ru.sikion.commandManager.CommandMode;
-import ru.sikion.fileLogic.Loader;
-import ru.sikion.models.Worker;
-import ru.sikion.models.handlers.CollectionHandler;
-import ru.sikion.models.handlers.WorkersHandler;
-
-import java.util.HashSet;
-
-/**
- * Program entry point class. Contains main() method.
- * This program is managing collection of type <code>HashSet&#8249;Route></code>
- *
- * @since 1.0
- * @author Sikion
- */
-public class Main {
-
-    /**
-     * Environment key to XML file for store collection.
-     */
-    public static final String ENV_KEY = "lab5";
-
-    /**
-     * Program entry point.
-     * @param args Command-line arguments
-     */
-    public static void main(String[] args) {
-        CollectionHandler<HashSet<Worker>, Worker> handler = WorkersHandler.getInstance();
-
-        // load collection
-        Loader<HashSet<Worker>, Worker> loader = new Loader<>(handler.getCollection().getClass(), Worker.class);
-        handler.setCollection(loader.loadFromXMLbyEnvKey(ENV_KEY));
-        System.out.println("Loaded " + handler.getCollection().size() + " elements total.");
-        System.out.println();
-
-        // commands
-        System.out.println("Welcome to CLI! Now you are operating with collection of type " + handler.getCollection().getClass().getName() + ", filled with elements of type " + handler.getFirstOrNew().getClass().getName());
-        System.out.println("Now you can enter the commands. Use help for reference.");
-        CommandExecutor executor = new CommandExecutor();
-        executor.startExecuting(System.in, CommandMode.CLI_UserMode);
-    }
-}
\ No newline at end of file
Index: lab_05-PreFinal/src/main/java/ru/sikion/models/Identity/Country.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/models/Identity/Country.java b/lab_05-PreFinal/src/main/java/ru/sikion/models/Identity/Country.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/models/Identity/Country.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,201 +0,0 @@
-package ru.sikion.models.Identity;
-
-public enum Country {
-    UNITED_KINGDOM,
-    GERMANY,
-    FRANCE,
-    INDIA,
-    VATICAN,
-    AFGHANISTAN,
-    ALBANIA,
-    ALGERIA,
-    ANDORRA,
-    ANGOLA,
-    ANTIGUA_AND_BARBUDA,
-    ARGENTINA,
-    ARMENIA,
-    AUSTRALIA,
-    AUSTRIA,
-    AZERBAIJAN,
-    THE_BAHAMAS,
-    BAHRAIN,
-    BANGLADESH,
-    BARBADOS,
-    BELARUS,
-    BELGIUM,
-    BELIZE,
-    BENIN,
-    BHUTAN,
-    BOLIVIA,
-    BOSNIA_AND_HERZEGOVINA,
-    BOTSWANA,
-    BRAZIL,
-    BRUNEI,
-    BULGARIA,
-    BURKINA_FASO,
-    BURUNDI,
-    CABO_VERDE,
-    CAMBODIA,
-    CAMEROON,
-    CANADA,
-    CENTRAL_AFRICAN_REPUBLIC,
-    CHAD,
-    CHILE,
-    CHINA,
-    COLOMBIA,
-    COMOROS,
-    CONGO,
-    DEMOCRATIC_REPUBLIC_OF_THE_CONGO_REPUBLIC_OF_THE,
-    COSTA_RICA,
-    COTE_DIVOIRE,
-    CROATIA,
-    CUBA,
-    CYPRUS,
-    CZECH_REPUBLIC,
-    DENMARK,
-    DJIBOUTI,
-    DOMINICA,
-    DOMINICAN_REPUBLIC,
-    EAST_TIMOR_,
-    ECUADOR,
-    EGYPT,
-    EL_SALVADOR,
-    EQUATORIAL_GUINEA,
-    ERITREA,
-    ESTONIA,
-    ESWATINI,
-    ETHIOPIA,
-    FIJI,
-    FINLAND,
-    GABON,
-    THE_GAMBIA,
-    GEORGIA,
-    GHANA,
-    GREECE,
-    GRENADA,
-    GUATEMALA,
-    GUINEA,
-    GUINEA_BISSAU,
-    GUYANA,
-    HAITI,
-    HONDURAS,
-    HUNGARY,
-    ICELAND,
-    INDONESIA,
-    IRAN,
-    IRAQ,
-    IRELAND,
-    ISRAEL,
-    ITALY,
-    JAMAICA,
-    JAPAN,
-    JORDAN,
-    KAZAKHSTAN,
-    KENYA,
-    KIRIBATI,
-    KOREA_NORTH,
-    KOREA_SOUTH,
-    KOSOVO,
-    KUWAIT,
-    KYRGYZSTAN,
-    LAOS,
-    LATVIA,
-    LEBANON,
-    LESOTHO,
-    LIBERIA,
-    LIBYA,
-    LIECHTENSTEIN,
-    LITHUANIA,
-    LUXEMBOURG,
-    MADAGASCAR,
-    MALAWI,
-    MALAYSIA,
-    MALDIVES,
-    MALI,
-    MALTA,
-    MARSHALL_ISLANDS,
-    MAURITANIA,
-    MAURITIUS,
-    MEXICO,
-    MICRONESIA,_FEDERATED_STATES_OF,
-    MOLDOVA,
-    MONACO,
-    MONGOLIA,
-    MONTENEGRO,
-    MOROCCO,
-    MOZAMBIQUE,
-    MYANMAR,
-    NAMIBIA,
-    NAURU,
-    NEPAL,
-    NETHERLANDS,
-    NEW_ZEALAND,
-    NICARAGUA,
-    NIGER,
-    NIGERIA,
-    NORTH_MACEDONIA,
-    NORWAY,
-    OMAN,
-    PAKISTAN,
-    PALAU,
-    PANAMA,
-    PAPUA_NEW_GUINEA,
-    PARAGUAY,
-    PERU,
-    PHILIPPINES,
-    POLAND,
-    PORTUGAL,
-    QATAR,
-    ROMANIA,
-    RUSSIA,
-    RWANDA,
-    SAINT_KITTS_AND_NEVIS,
-    SAINT_LUCIA,
-    SAINT_VINCENT_AND_THE_GRENADINES,
-    SAMOA,
-    SAN_MARINO,
-    SAO_TOME_AND_PRINCIPE,
-    SAUDI_ARABIA,
-    SENEGAL,
-    SERBIA,
-    SEYCHELLES,
-    SIERRA_LEONE,
-    SINGAPORE,
-    SLOVAKIA,
-    SLOVENIA,
-    SOLOMON_ISLANDS,
-    SOMALIA,
-    SOUTH_AFRICA,
-    SPAIN,
-    SRI_LANKA,
-    SUDAN,
-    SUDAN_SOUTH,
-    SURINAME,
-    SWEDEN,
-    SWITZERLAND,
-    SYRIA,
-    TAIWAN,
-    TAJIKISTAN,
-    TANZANIA,
-    THAILAND,
-    TOGO,
-    TONGA,
-    TRINIDAD_AND_TOBAGO,
-    TUNISIA,
-    TURKEY,
-    TURKMENISTAN,
-    TUVALU,
-    UGANDA,
-    UKRAINE,
-    UNITED_ARAB_EMIRATES,
-    UNITED_STATES,
-    URUGUAY,
-    UZBEKISTAN,
-    VANUATU,
-    VATICAN_CITY,
-    VENEZUELA,
-    VIETNAM,
-    YEMEN,
-    ZAMBIA,
-    ZIMBABWE,
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/SaveCommand.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/SaveCommand.java b/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/SaveCommand.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/SaveCommand.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,38 +0,0 @@
-package ru.sikion.commandManager.commands;
-
-import ru.sikion.exceptions.WrongAmountOfArgumentsException;
-import ru.sikion.fileLogic.Saver;
-import ru.sikion.models.Worker;
-import ru.sikion.models.handlers.CollectionHandler;
-import ru.sikion.models.handlers.WorkersHandler;
-
-import java.util.HashSet;
-
-/**
- * Saves collection to file.
- *
- * @since 1.0
- * @author Sikion
- */
-public class SaveCommand implements BaseCommand {
-    @Override
-    public String getName() {
-        return "save";
-    }
-
-    @Override
-    public String getDescr() {
-        return "Saves collection to file.";
-    }
-
-    @Override
-    public void execute(String[] args) throws WrongAmountOfArgumentsException {
-        System.out.println("Saving...");
-        CollectionHandler<HashSet<Worker>, Worker> collectionHandler = WorkersHandler.getInstance();
-        Saver<HashSet<Worker>, Worker> saver = new Saver<>(Worker.class);
-
-        saver.saveCollection(collectionHandler.getCollection(), "lab5");
-
-        System.out.println("Executed.");
-    }
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/commandManager/CommandExecutor.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/CommandExecutor.java b/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/CommandExecutor.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/CommandExecutor.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,38 +0,0 @@
-package ru.sikion.commandManager;
-
-import ru.sikion.exceptions.CommandInterruptedException;
-
-import java.io.InputStream;
-import java.util.Scanner;
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
-/**
- * Class for executing commands. Provides different inputs for command executing.
- */
-public class CommandExecutor {
-    private static final Logger myLogger = Logger.getLogger("com.github.Sikion.lab5");
-
-    /**
-     * Start executing commands from InputStream.
-     *
-     * @param input commands stream (File, System.in, e.t.c.)
-     * @param mode  variant of command behavior (see CommandMode enum)
-     */
-    public void startExecuting(InputStream input, CommandMode mode) {
-        Scanner cmdScanner = new Scanner(input);
-        CommandManager commandManager = new CommandManager(mode, cmdScanner);
-        while (cmdScanner.hasNext()) {
-            String line = cmdScanner.nextLine();
-            if (line.isEmpty()) continue;
-            try {
-                commandManager.executeCommand(line.split(" "));
-            } catch (CommandInterruptedException ex) {
-                if (mode.equals(CommandMode.CLI_UserMode))
-                    myLogger.log(Level.INFO, "The execution of the command was aborted. You can continue. The program has been returned to a secure state.");
-                else
-                    myLogger.log(Level.INFO, "The command has been skipped... The handler is still working");
-            }
-        }
-    }
-}
\ No newline at end of file
Index: lab_05-PreFinal/src/main/java/ru/sikion/fileLogic/Loader.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/fileLogic/Loader.java b/lab_05-PreFinal/src/main/java/ru/sikion/fileLogic/Loader.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/fileLogic/Loader.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,231 +0,0 @@
-package ru.sikion.fileLogic;
-
-import ru.sikion.fileLogic.editors.DateEditor;
-
-import java.beans.PropertyEditor;
-import java.beans.PropertyEditorManager;
-import java.io.IOException;
-import java.lang.reflect.Field;
-import java.nio.charset.CharacterCodingException;
-import java.nio.file.AccessDeniedException;
-import java.time.format.DateTimeParseException;
-import java.util.*;
-import java.util.logging.Level;
-import java.util.logging.Logger;
-import java.util.regex.Pattern;
-
-/**
- * Abstract loader class. It uses <code>java.lang.reflect</code> API for changing fields taken from XML file
- * and converted by <code>java.beans.PropertyEditor</code>. It fills Elements of type E to collection of type T
- * @param <T> Collection to fill
- * @param <E> Type of collection elements
- * @see java.lang.reflect
- * @see PropertyEditor
- * @since 1.0
- * @author Sikion
- */
-
-public class Loader<T extends Collection<E>, E> {
-
-    private static final Logger myLogger = Logger.getLogger("com.github.Sikion.lab5");
-
-    private T resultCollection;
-
-    private final Class<E> fullClassOfElement;
-
-    /**
-     * Initializer of fileLogic.Loader class.
-     *
-     * @param tClass Class of <code>T</code>. Should be provided due to Java's generic types restriction.
-     * @param eClass Class of <code>E</code>. Should be provided due to Java's generic types restriction.
-     */
-    public Loader(Class<T> tClass, Class<E> eClass)
-    {
-        setupConverter();
-        fullClassOfElement = eClass;
-        try {
-            resultCollection = tClass.newInstance();
-            buildingObject = buildElement();
-        }
-        catch (Exception e)
-        {
-            myLogger.log(Level.SEVERE, "В программе возникла проблема: " + e);
-        }
-    }
-
-
-    private static void setupConverter() {
-        PropertyEditorManager.registerEditor(Date.class, DateEditor.class);
-    }
-
-    /**
-     * Manually register editor for your datatype. Call this method before parsing XML.
-     *
-     * @param typeToEdit Type to register in editor
-     * @param editor Editor of type. Should implement PropertyEditor interface
-     *
-     * @see PropertyEditor
-     */
-    public static void setupConverter(Class<?> typeToEdit, Class<? extends PropertyEditor> editor)
-    {
-        PropertyEditorManager.registerEditor(typeToEdit, editor);
-    }
-
-    /**
-     * Fill collection with elements from XML file.
-     * XML filepath will be taken from Environment variable
-     *
-     * @param envKey Key of System env. var to XML filepath
-     * @return Filled collection of type T
-     */
-    public T loadFromXMLbyEnvKey(String envKey) {
-        String xmlPath = System.getenv(envKey);
-        if (xmlPath == null) {
-            myLogger.log(Level.SEVERE, "Отсутствует переменная окружения с путем к загрузочному файлу!");
-            myLogger.log(Level.INFO, "Задайте переменную окружения с именем \"lab5\", поместив туда полный путь к XML файлу.");
-            myLogger.log(Level.WARNING, "Выполнение программы не может быть продолжено.");
-            System.exit(-1);
-        }
-
-        BaseReader reader = new CSVReader();
-
-        resultCollection = loadFromFile(xmlPath, reader);
-
-        return resultCollection;
-    }
-
-    /**
-     * Abstract method to read any collection from any file by any reader.
-     * @param path Path to file
-     * @param reader File reader
-     * @return Collection with elements matched by file
-     */
-    public T loadFromFile(String path, BaseReader reader)
-    {
-        try {
-            LinkedHashMap<String[], String> parsedValues = reader.readFromFile(path);
-
-            if (!parsedValues.isEmpty())
-                fillCollection(parsedValues);
-
-        } catch (AccessDeniedException ex) {
-            System.out.println("/ ! \\ File reading failed because application cannot access to this file. Contact your administrator and ask him to write \'sudo chmod 755 $lab5\'");
-        } catch (CharacterCodingException ex) {
-            System.out.println("/ ! \\ File reading filed because system cannot understand file-coding. Contact your administrator.");
-        } catch (IOException e) {
-            System.out.println("/ ! \\ Something went wrong during reading the file. Loading was skipped...");
-            myLogger.log(Level.SEVERE, "Во время работы с вводом-выводом произошла непредвиденная ошибка! " + e.getMessage());
-        } catch (Exception e) {
-            System.out.println("/ ! \\ File reading failed due to broken XML file. Fix it manually & try again.");
-        }
-        return resultCollection;
-    }
-
-    private void fillCollection(LinkedHashMap<String[], String> parsedValues) {
-        parsedValues.forEach(this::addFieldToElement);
-
-        myLogger.log(Level.FINE, "adding last...");
-        addObjectToCollection(buildingObject); // add last
-    }
-
-    private int latestKnownIndex = 0;
-    private E buildingObject;
-
-    private void addFieldToElement(String[] pathToField, String s) {
-        // match the correct object
-        var matcher = Pattern.compile("[0-9]+?").matcher(pathToField[1]);
-        int currentIndex;
-        if (matcher.find())
-        {
-            currentIndex = Integer.parseInt(matcher.group());
-        }
-        else {
-            myLogger.log (Level.WARNING, "Поле имеет некорректный адрес и будет пропущено. " + Arrays.toString(pathToField));
-            return;
-        }
-        if (latestKnownIndex != currentIndex)
-        {
-            latestKnownIndex = currentIndex;
-            if (resultCollection.size() > currentIndex)
-            {
-                // object exists
-                Iterator<E> iterator = resultCollection.iterator();
-                for (int i = 0; i <= currentIndex; i++)
-                {
-                    buildingObject = iterator.next();
-                }
-            }
-            else
-            {
-                // build new
-                myLogger.log(Level.FINE, "adding object...");
-                addObjectToCollection(buildingObject);
-                buildingObject = buildElement();
-            }
-        }
-
-        // set field value
-
-        for (int i = 2; i < pathToField.length; i++)
-        {
-            try {
-                setField(fullClassOfElement, pathToField, 2, s, buildingObject);
-
-            } catch (NoSuchFieldException | InstantiationException | IllegalAccessException e) {
-                myLogger.log(Level.SEVERE, "Поле не было обнаружено: " + e);
-            }
-        }
-    }
-
-    private void addObjectToCollection(E buildingObject) {
-        resultCollection.add(buildingObject);
-    }
-
-    private <U> void setField (Class<?> currentType, String[] fullPath, int currentIndex, String value, U object) throws NoSuchFieldException, InstantiationException, IllegalAccessException {
-        Field fieldToSet = currentType.getDeclaredField(fullPath[currentIndex++]);
-        fieldToSet.setAccessible(true);
-        Class<U> nextType = (Class<U>) fieldToSet.getType();
-        if (currentIndex != fullPath.length)
-        {
-            U nextObject = (U) fieldToSet.get(object);
-            if (nextObject == null)
-            {
-                nextObject = nextType.newInstance();
-                fieldToSet.set(object, nextObject);
-            }
-            setField(nextType, fullPath, currentIndex, value, nextObject);
-        }
-        else
-        {
-            try
-            {
-                fieldToSet.set(object, convert(nextType, value));
-            }
-            catch (NullPointerException | NumberFormatException | DateTimeParseException e)
-            {
-                myLogger.log(Level.WARNING, "XML файл поврежден. Строка с данными " + value + " (Адрес: " + Arrays.toString(fullPath) + ") была пропущена.");
-                myLogger.log(Level.INFO, "Если вы считаете, что произошла ошибка, добавьте в регистр обработчик. Взгляните на Loader.setupConverter в Javadoc или свяжитесь с администратором.");
-            }
-        }
-    }
-
-    private Object convert(Class<?> targetType, String text) {
-        PropertyEditor editor = PropertyEditorManager.findEditor(targetType);
-        editor.setAsText(text);
-        return editor.getValue();
-    }
-
-    private E buildElement() {
-
-        E result = null;
-        try
-        {
-            result = fullClassOfElement.newInstance();
-        } catch (InstantiationException e) {
-            myLogger.log(Level.SEVERE, "При инициализации элемента возникла проблема! " + e.getMessage());
-        } catch (IllegalAccessException e) {
-            myLogger.log(Level.SEVERE, "Ошибка доступа! " + e.getMessage());
-        }
-        return result;
-    }
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/models/Identity/EyeColor.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/models/Identity/EyeColor.java b/lab_05-PreFinal/src/main/java/ru/sikion/models/Identity/EyeColor.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/models/Identity/EyeColor.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,25 +0,0 @@
-package ru.sikion.models.Identity;
-
-public enum EyeColor {
-    BLACK("\u001B[31m"),
-    BROWn("\u001B[32m"),
-    BLUE("\u001B[33m"),
-    HAZEL("\u001B[34m"),
-    AMBER("\u001B[35m"),
-    GREEN("\u001B[36m"),
-    GRAY("\u001B[37m");
-    private final String title;
-
-    EyeColor(String title) {
-        this.title = title;
-    }
-
-    public String getTitle() {
-        return title;
-    }
-
-    @Override
-    public String toString() {
-        return this.title;
-    }
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/MinByCreationDateCommand.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/MinByCreationDateCommand.java b/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/MinByCreationDateCommand.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/MinByCreationDateCommand.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,44 +0,0 @@
-package ru.sikion.commandManager.commands;
-
-import ru.sikion.models.Worker;
-import ru.sikion.models.handlers.CollectionHandler;
-import ru.sikion.models.handlers.WorkersHandler;
-
-import java.util.Date;
-import java.util.HashSet;
-
-/**
- * Returns element from collection with min creation date.
- *
- * @since 1.0
- * @author Sikion
- */
-public class MinByCreationDateCommand implements BaseCommand{
-    @Override
-    public String getName() {
-        return "min_by_creation_date";
-    }
-
-    @Override
-    public String getDescr() {
-        return "Returns element from collection with min creation date.";
-    }
-
-    @Override
-    public void execute(String[] args) {
-        CollectionHandler<HashSet<Worker>, Worker> collectionHandler = WorkersHandler.getInstance();
-        Date min = collectionHandler.getCollection().stream().map(Worker::getCreationDate).min(Date::compareTo).orElse(null);
-
-        if (min == null)
-        {
-            System.out.println("There's nothing to show...");
-        }
-        else
-        {
-            for (Worker obj : collectionHandler.getCollection()) {
-                if (obj.getCreationDate().equals(min))
-                    System.out.println(obj);
-            }
-        }
-    }
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/commandManager/CommandManager.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/CommandManager.java b/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/CommandManager.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/CommandManager.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,114 +0,0 @@
-package ru.sikion.commandManager;
-
-import ru.sikion.commandManager.commands.*;
-import ru.sikion.exceptions.BuildObjectException;
-import ru.sikion.exceptions.CommandInterruptedException;
-import ru.sikion.exceptions.UnknownCommandException;
-import ru.sikion.exceptions.WrongAmountOfArgumentsException;
-import ru.sikion.models.Worker;
-import ru.sikion.models.handlers.ModuleHandler;
-import ru.sikion.models.handlers.nonUserMode.WorkerNonCLIHandler;
-import ru.sikion.models.handlers.userMode.RouteCLIHandler;
-
-import java.util.LinkedHashMap;
-import java.util.Optional;
-import java.util.Scanner;
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
-/**
- * Command Manager for interactive collection manage. For execute commands, use CommandExecutor class
- *
- * @see CommandExecutor
- * @since 1.0
- * @author Sikion
- */
-public class CommandManager {
-
-    private static final Logger myLogger = Logger.getLogger("com.github.Sikion.lab5");
-    LinkedHashMap<String, BaseCommand> commands;
-
-    /**
-     * Setup command manager and all of its commands.
-     */
-    public CommandManager()
-    {
-        commands = new LinkedHashMap<>();
-
-        commands.put("help", new HelpCommand());
-        commands.put("info", new InfoCommand());
-        commands.put("show", new ShowCommand());
-        commands.put("add", new AddCommand());
-        commands.put("update", new UpdateCommand());
-        commands.put("remove_by_id", new RemoveByIdCommand());
-        commands.put("clear", new ClearCommand());
-        commands.put("save", new SaveCommand());
-        commands.put("execute_script", new ExecuteScriptCommand());
-        commands.put("exit", new ExitCommand());
-        commands.put("min_by_creation_date", new MinByCreationDateCommand());
-    }
-
-    /**
-     * Constructor provides choice of commands behavior: ex. userMode or nonUserMode
-     *
-     * @since 1.1
-     * @see CommandMode
-     * @param mode Mode for CommandHandler
-     * @param scanner Commands scanner
-     */
-    public CommandManager(CommandMode mode, Scanner scanner) {
-        commands = new LinkedHashMap<>();
-        
-        commands.put("help", new HelpCommand());
-        commands.put("info", new InfoCommand());
-        commands.put("show", new ShowCommand());
-        commands.put("remove_by_id", new RemoveByIdCommand());
-        commands.put("clear", new ClearCommand());
-        commands.put("save", new SaveCommand());
-        commands.put("execute_script", new ExecuteScriptCommand());
-        commands.put("exit", new ExitCommand());
-        commands.put("min_by_creation_date", new MinByCreationDateCommand());
-
-        ModuleHandler<Worker> handler = null;
-        switch (mode)
-        {
-            case CLI_UserMode -> handler = new RouteCLIHandler();
-            case NonUserMode -> handler = new WorkerNonCLIHandler(scanner);
-        }
-
-        commands.put("add", new AddCommand(handler));
-        commands.put("update", new UpdateCommand(handler));
-    }
-
-    /**
-     * Get all commands from manager.
-     *
-     * @return Map of loaded commands
-     */
-    public LinkedHashMap<String, BaseCommand> getCommands() {
-        return commands;
-    }
-
-    /**
-     * Universe method for command executing.
-     *
-     * @param args full separated line from stream
-     */
-    public void executeCommand(String[] args) {
-        try {
-            Optional.ofNullable(commands.get(args[0])).orElseThrow(() -> new UnknownCommandException("Указанная команда не была обнаружена")).execute(args);
-        } catch (IllegalArgumentException | NullPointerException e) {
-            myLogger.log(Level.SEVERE, "Выполнение команды пропущено из-за неправильных предоставленных аргументов! (" + e.getMessage() + ")");
-            throw new CommandInterruptedException(e);
-        } catch (BuildObjectException | UnknownCommandException e) {
-            myLogger.log(Level.SEVERE, e.getMessage());
-            throw new CommandInterruptedException(e);
-        } catch (WrongAmountOfArgumentsException e) {
-            myLogger.log(Level.SEVERE, "Wrong amount of arguments! " + e.getMessage());
-            throw new CommandInterruptedException(e);
-        } catch (Exception e) {
-            myLogger.log(Level.SEVERE, "В командном менеджере произошла непредвиденная ошибка! " + e.getMessage());
-            throw new CommandInterruptedException(e);
-        }
-    }
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/exceptions/BuildObjectException.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/exceptions/BuildObjectException.java b/lab_05-PreFinal/src/main/java/ru/sikion/exceptions/BuildObjectException.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/exceptions/BuildObjectException.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,8 +0,0 @@
-package ru.sikion.exceptions;
-
-public class BuildObjectException extends Exception {
-    public BuildObjectException(String msg)
-    {
-        super(msg);
-    }
-}
Index: src/main/java/ru/sikion/fileLogic/CSVWriter.java
===================================================================
diff --git a/src/main/java/ru/sikion/fileLogic/CSVWriter.java b/src/main/java/ru/sikion/fileLogic/CSVWriter.java
deleted file mode 100644
--- a/src/main/java/ru/sikion/fileLogic/CSVWriter.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,94 +0,0 @@
-package ru.sikion.fileLogic;
-
-import java.io.File;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.io.PrintWriter;
-import java.util.*;
-import java.util.logging.Logger;
-
-/**
- * XML Writer class for <code>Saver</code> class. It writes XML file by given path and consume
- * collection of paths and values, transforming it into XML file.
- *
- * @see LinkedHashMap
- * @since 1.0
- * @author Sikion
- */
-public class CSVWriter implements BaseWriter {
-
-    private static final Logger myLogger = Logger.getLogger("com.github.Sikion.lab5");
-
-    @Override
-    public void writeToFile(String path, LinkedHashMap<String[], String> values) {
-        try (PrintWriter writer = new PrintWriter(path)) {
-
-            while (values.values().remove(null));
-
-            writer.println("<?xml version=\"1.0\"?>");
-            writer.println();
-            writer.println("<routes>");
-            values.forEach((address, value) -> writeElement(writer, address, getNextAddress(values, address), value));
-            writer.println("</routes>");
-
-        } catch (FileNotFoundException e) {
-            File xml = new File(path);
-            try {
-                boolean isCreated = xml.createNewFile();
-                if (isCreated) writeToFile(path, values);
-                else throw new IOException("Cannot create file.");
-            } catch (IOException ex) {
-                ex.initCause(e);
-                System.out.println("We cannot access file, so we tried to create it...");
-                System.out.println("But creating file finished with unexpected error.");
-                System.out.println("Try to create this file manually: " + path);
-                System.out.println("Check access to file if it exists.");
-                System.out.println("Or change environment variable.");
-                System.out.println("Please, don't modify/remove this xml file. It goes to unknown consequences.");
-            }
-        }
-    }
-
-    int lastKnownI = 0;
-    private void writeElement(PrintWriter writer, String[] address, String[] nextAddress, String value)
-    {
-        if (value == null) return;
-
-        for (int i = lastKnownI; i < address.length; i++)
-        {
-            for (int j = 0; j < i + 1; j++)
-            {
-                writer.print("\t");
-            }
-            myLogger.fine("Opening: " + address[i] + "Addresses // next: " + Arrays.toString(nextAddress) + ", current: " + Arrays.toString(address));
-            writer.println("<" + address[i] + ">");
-        }
-        for (int j = 0; j < address.length + 1; j++)
-        {
-            writer.print("\t");
-        }
-        writer.println(value);
-        for (lastKnownI = address.length; lastKnownI > 0; lastKnownI--) {
-            myLogger.fine("Addresses // next: " + Arrays.toString(nextAddress) + ", current: " + Arrays.toString(address) + " / lastI: " + lastKnownI);
-            if (nextAddress.length < lastKnownI || !Objects.equals(nextAddress[lastKnownI - 1], address[lastKnownI - 1])) {
-                for (int j = 0; j < lastKnownI; j++) {
-                    writer.print("\t");
-                }
-                writer.println("</" + address[lastKnownI - 1] + ">");
-                myLogger.fine("Closing: " + address[lastKnownI - 1]);
-            }
-            else break;
-        }
-    }
-
-    private String[] getNextAddress(LinkedHashMap<String[], String> map, String[] key) {
-        List<String[]> keys = new ArrayList<>(map.keySet());
-        int index = keys.indexOf(key);
-
-        if (index < 0 || index >= keys.size() - 1)
-            return new String[0];
-
-        String[] k = keys.get(index + 1);
-        return Objects.requireNonNullElseGet(k, () -> new String[0]);
-    }
-}
Index: src/main/java/ru/sikion/models/validators/PassportIDValidator.java
===================================================================
diff --git a/src/main/java/ru/sikion/models/validators/PassportIDValidator.java b/src/main/java/ru/sikion/models/validators/PassportIDValidator.java
deleted file mode 100644
--- a/src/main/java/ru/sikion/models/validators/PassportIDValidator.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,24 +0,0 @@
-package ru.sikion.models.validators;
-
-/**
- * Passport ID validator. Checks if passport ID is not empty.
- *
- * @author Sikion
- * @version 1.0
- */
-public class PassportIDValidator implements Validator<String> {
-    /**
-     * Validates passport ID.
-     *
-     * @param value passport ID to validate
-     * @return true if passport ID is unique, greater than 0 and lower than 36. Otherwise, false.
-     */
-    @Override
-    public boolean validate(String value) {
-        if (value instanceof String passportID) {
-            return passportID.trim().length() > 0 && passportID.trim().length() < 36;
-        }
-        return false;
-    }
-
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/commandManager/CommandMode.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/CommandMode.java b/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/CommandMode.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/CommandMode.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,18 +0,0 @@
-package ru.sikion.commandManager;
-
-/**
- * Contains information about mode of commands behavior
- *
- * @since 1.1
- * @author Sikion
- */
-public enum CommandMode {
-    /**
-     * Commands will use user-friendly interaction. Envisage that it will be used with System.in scanner
-     */
-    CLI_UserMode,
-    /**
-     * Commands will use simple interaction w/o user-orientation. Envisage that it will be used with file streams, e.t.c.
-     */
-    NonUserMode
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/models/validators/IdValidator.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/IdValidator.java b/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/IdValidator.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/IdValidator.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,47 +0,0 @@
-package ru.sikion.models.validators;
-
-import ru.sikion.models.Worker;
-import ru.sikion.models.handlers.CollectionHandler;
-import ru.sikion.models.handlers.WorkersHandler;
-
-import java.util.HashSet;
-import java.util.TreeSet;
-
-/**
- * Implementation of validator for ID field. (Worker)
- *
- * @author Sikion
- * @since 1.0
- */
-public class IdValidator implements Validator<Integer> {
-
-    TreeSet<Integer> ids;
-
-
-    /**
-     * Setup validator default constructor
-     */
-    public IdValidator() {
-        ids = new TreeSet<>();
-
-        CollectionHandler<HashSet<Worker>, Worker> handler = WorkersHandler.getInstance();
-
-        handler.getCollection().forEach((value) -> ids.add(value.getId()));
-    }
-
-    /**
-     * Checks if value unique in collection, greater than 0 and notnull.
-     *
-     * @param value ID to validate
-     * @return true/false -- matches the restrictions
-     * @see Worker
-     */
-
-    @Override
-    public boolean validate(Integer value) {
-        if (value == null) return false;
-        if (value <= 0) return false;
-        return ids.add(value);
-    }
-
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/RemoveByIdCommand.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/RemoveByIdCommand.java b/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/RemoveByIdCommand.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/RemoveByIdCommand.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,46 +0,0 @@
-package ru.sikion.commandManager.commands;
-
-import ru.sikion.exceptions.WrongAmountOfArgumentsException;
-import ru.sikion.Utilities;
-import ru.sikion.models.Worker;
-import ru.sikion.models.handlers.CollectionHandler;
-import ru.sikion.models.handlers.WorkersHandler;
-
-import java.util.HashSet;
-import java.util.Objects;
-
-/**
- * Removes element from collection by id.
- *
- * @since 1.0
- * @author Sikion
- */
-public class RemoveByIdCommand implements BaseCommand {
-
-    @Override
-    public String getName() {
-        return "remove_by_id";
-    }
-
-    @Override
-    public String getDescr() {
-        return "Removes element from collection by id.";
-    }
-    @Override
-    public String getArgs() {
-        return "id";
-    }
-    @Override
-    public void execute(String[] args) throws WrongAmountOfArgumentsException {
-        Utilities.checkArgumentsOrThrow(args.length, 1);
-
-        CollectionHandler<HashSet<Worker>, Worker> collectionHandler = WorkersHandler.getInstance();
-
-        Long finalId = Utilities.handleUserInputID(args[1]);
-        if (finalId == null) return;
-
-        collectionHandler.getCollection().removeIf(worker -> Objects.equals(worker.getId(), finalId));
-
-        System.out.println("Executed.");
-    }
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/fileLogic/editors/DateEditor.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/fileLogic/editors/DateEditor.java b/lab_05-PreFinal/src/main/java/ru/sikion/fileLogic/editors/DateEditor.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/fileLogic/editors/DateEditor.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,92 +0,0 @@
-package ru.sikion.fileLogic.editors;
-
-import java.awt.*;
-import java.beans.PropertyChangeListener;
-import java.beans.PropertyEditor;
-import java.time.Instant;
-import java.time.format.DateTimeParseException;
-import java.util.Date;
-
-/**
- * Example of editor, that uses in fileLogic to convert String into object.
- * You should register your editor class in Loader by using their static method.
- *
- * @see java.beans.PropertyEditorManager
- * @since 1.0
- * @author Sikion
- */
-public class DateEditor implements PropertyEditor {
-
-    private Date result;
-
-    /**
-     * Default constructor
-     */
-    public DateEditor()
-    {
-        result = new Date();
-    }
-    @Override
-    public void setValue(Object value) {
-        result = (Date)value;
-    }
-
-    @Override
-    public Object getValue() {
-        return result;
-    }
-
-    @Override
-    public boolean isPaintable() {
-        return false;
-    }
-
-    @Override
-    public void paintValue(Graphics gfx, Rectangle box) {
-
-    }
-
-    @Override
-    public String getJavaInitializationString() {
-        return null;
-    }
-
-    @Override
-    public String getAsText() {
-        return result.toInstant().toString();
-    }
-
-    @Override
-    public void setAsText(String text) throws IllegalArgumentException {
-        try {
-            result = Date.from(Instant.parse(text));
-        }
-        catch (DateTimeParseException e)
-        {
-            throw new IllegalArgumentException(e);
-        }
-    }
-
-    @Override
-    public String[] getTags() {
-        return new String[0];
-    }
-
-    @Override
-    public Component getCustomEditor() {
-        return null;
-    }
-
-    @Override
-    public boolean supportsCustomEditor() {
-        return false;
-    }
-
-    @Override
-    public void addPropertyChangeListener(PropertyChangeListener listener) {}
-
-    @Override
-    public void removePropertyChangeListener(PropertyChangeListener listener) {
-
-    }
-}
\ No newline at end of file
Index: lab_05-PreFinal/src/main/java/ru/sikion/models/Worker.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/models/Worker.java b/lab_05-PreFinal/src/main/java/ru/sikion/models/Worker.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/models/Worker.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,226 +0,0 @@
-package ru.sikion.models;
-
-import ru.sikion.models.Identity.Status;
-
-import java.util.Objects;
-
-/**
- * Model of Worker. Main model of the program. Contains getters/setters of each class fields.
- * Some fields have restrictions. It's signed under every method of field.
- *
- * @author Sikion
- * @since 1.0
- */
-public class Worker implements Comparable<Worker> {
-    private Integer id;
-    private String name;
-    private Coordinates coordinates;
-    private java.util.Date creationDate;
-    private Double salary;
-    private java.util.Date startDate;
-    private java.time.ZonedDateTime endDate;
-    private Status status;
-    private Person person;
-
-    /**
-     * Restrictions: Field cannot be null. The value of this field should be unique, greater than 0 and automatically generated.
-     *
-     * @return id of the worker
-     */
-    public Integer getId() {
-        return id;
-    }
-
-    /**
-     * Restrictions: Field cannot be null. String must not be empty.
-     *
-     * @return Name of the worker
-     */
-    public String getName() {
-        return name;
-    }
-
-    /**
-     * Restrictions: Field cannot be null.
-     *
-     * @return Coordinates of the worker
-     */
-    public Coordinates getCoordinates() {
-        return coordinates;
-    }
-
-    /**
-     * Restrictions: Field cannot be null and the value of this field should be automatically generated.
-     *
-     * @return Creation date of the worker
-     */
-    public java.util.Date getCreationDate() {
-        return creationDate;
-    }
-
-    /**
-     * Restrictions: Field can be null. Value of this field should be greater than 0.
-     *
-     * @return Salary of the worker
-     */
-    public Double getSalary() {
-        return salary;
-    }
-
-    /**
-     * Restrictions: Field cannot be null.
-     *
-     * @return Start date of the worker
-     */
-    public java.util.Date getStartDate() {
-        return startDate;
-    }
-
-    /**
-     * Restrictions: Field can be null.
-     *
-     * @return End date of the worker
-     */
-    public java.time.ZonedDateTime getEndDate() {
-        return endDate;
-    }
-
-    /**
-     * Restrictions: Field can be null.
-     *
-     * @return Status of the worker
-     */
-    public Status getStatus() {
-        return status;
-    }
-
-    /**
-     * Restrictions: Field can be null.
-     *
-     * @return Person of the worker
-     */
-    public Person getPerson() {
-        return person;
-    }
-
-    /**
-     * Restrictions: Field cannot be null. The value of this field should be unique, greater than 0 and automatically generated.
-     *
-     * @param id value of field id
-     */
-    public void setId(Integer id) {
-        this.id = id;
-    }
-
-    /**
-     * Restrictions: Field cannot be null. String must not be empty.
-     *
-     * @param name value of field name
-     */
-    public void setName(String name) {
-        this.name = name;
-    }
-
-    /**
-     * Restrictions: Field cannot be null.
-     *
-     * @param coordinates value of field coordinates
-     */
-    public void setCoordinates(Coordinates coordinates) {
-        this.coordinates = coordinates;
-    }
-
-    /**
-     * Restrictions: Field can be null. Value of this field should be greater than 0.
-     *
-     * @param salary of value field salary
-     */
-    public void setSalary(Double salary) {
-        this.salary = salary;
-    }
-
-    /**
-     * Restrictions: Field cannot be null.
-     *
-     * @param startDate of value field startDate
-     */
-    public void setStartDate(java.util.Date startDate) {
-        this.startDate = startDate;
-    }
-
-    /**
-     * Restrictions: Field can be null.
-     *
-     * @param endDate of value field endDate
-     */
-    public void setEndDate(java.time.ZonedDateTime endDate) {
-        this.endDate = endDate;
-    }
-
-    /**
-     * Restrictions: Field can be null.
-     *
-     * @param status of value field status
-     */
-    public void setStatus(Status status) {
-        this.status = status;
-    }
-
-    /**
-     * Restrictions: Field can be null.
-     *
-     * @param person of value field person
-     */
-    public void setPerson(Person person) {
-        this.person = person;
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (!(o instanceof Worker worker)) return false;
-        return Objects.equals(getId(), worker.getId()) && Objects.equals(getName(), worker.getName()) && Objects.equals(getCoordinates(), worker.getCoordinates()) && Objects.equals(getCreationDate(), worker.getCreationDate()) && Objects.equals(getSalary(), worker.getSalary()) && Objects.equals(getStartDate(), worker.getStartDate()) && Objects.equals(getEndDate(), worker.getEndDate()) && getStatus() == worker.getStatus() && Objects.equals(getPerson(), worker.getPerson());
-    }
-
-    @Override
-    public int hashCode() {
-        return Objects.hash(getId(), getName(), getCoordinates(), getCreationDate(), getSalary(), getStartDate(), getEndDate(), getStatus(), getPerson());
-    }
-
-    @Override
-    public String toString() {
-        return "Worker{" +
-                "id=" + id +
-                ", name='" + name + '\'' +
-                ", coordinates=" + coordinates +
-                ", creationDate=" + creationDate +
-                ", salary=" + salary +
-                ", startDate=" + startDate +
-                ", endDate=" + endDate +
-                ", status=" + status +
-                ", person=" + person +
-                '}';
-    }
-
-    @Override
-    public int compareTo(Worker o) {
-        return 0;
-    }
-
-    public Coordinates getCoordinates(Worker worker) {
-        return this.coordinates;
-    }
-
-
-//    @Override
-//    public int compareTo(Worker o) {
-//        if (o == null) return 1;
-//        if (o.id == null) return -1;
-//        if (this.distance - o.distance < 0)
-//            return -1;
-//        else if (this.distance == o.distance)
-//            return 0;
-//        else
-//            return 1;
-//    }
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/UpdateCommand.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/UpdateCommand.java b/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/UpdateCommand.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/UpdateCommand.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,82 +0,0 @@
-package ru.sikion.commandManager.commands;
-
-import ru.sikion.exceptions.BuildObjectException;
-import ru.sikion.exceptions.WrongAmountOfArgumentsException;
-import ru.sikion.Utilities;
-import ru.sikion.models.Worker;
-import ru.sikion.models.handlers.CollectionHandler;
-import ru.sikion.models.handlers.ModuleHandler;
-import ru.sikion.models.handlers.userMode.RouteCLIHandler;
-import ru.sikion.models.handlers.WorkersHandler;
-
-import java.util.HashSet;
-import java.util.Objects;
-
-/**
- * Updates element by its ID.
- *
- * @since 1.0
- * @author Sikion
- */
-public class UpdateCommand implements BaseCommand {
-
-    ModuleHandler<Worker> handler;
-
-    /**
-     * Default constructor with handler from 1.0
-     */
-    public UpdateCommand()
-    {
-        handler = new RouteCLIHandler();
-    }
-
-    /**
-     * Provides choosing handler
-     *
-     * @since 1.1
-     * @param handler ModuleHandler for operating
-     */
-    public UpdateCommand(ModuleHandler<Worker> handler)
-    {
-        this.handler = handler;
-    }
-
-    @Override
-    public String getName() {
-        return "update";
-    }
-
-    @Override
-    public String getDescr() {
-        return "Updates element by it's ID.";
-    }
-
-    @Override
-    public String getArgs() {
-        return "id {element}";
-    }
-
-    @Override
-    public void execute(String[] args) throws BuildObjectException, WrongAmountOfArgumentsException {
-        Utilities.checkArgumentsOrThrow(args.length, 1);
-
-        CollectionHandler<HashSet<Worker>, Worker> collectionHandler = WorkersHandler.getInstance();
-
-        Long finalId = Utilities.handleUserInputID(args[1]);
-        if (finalId == null) return;
-
-        if(!collectionHandler.getCollection().removeIf(worker -> Objects.equals(worker.getId(), finalId)))
-        {
-            System.out.println("Element with that id doesn't exists.");
-            return;
-        }
-        Worker newObj = handler.buildObject();
-
-        System.out.println("Updated ID value: " + finalId);
-        newObj.setId(finalId);
-
-        collectionHandler.addElementToCollection(newObj);
-
-        System.out.println("Object updated!");
-    }
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/fileLogic/BaseWriter.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/fileLogic/BaseWriter.java b/lab_05-PreFinal/src/main/java/ru/sikion/fileLogic/BaseWriter.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/fileLogic/BaseWriter.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,16 +0,0 @@
-package ru.sikion.fileLogic;
-
-import java.util.LinkedHashMap;
-
-/**
- * Base Writer interface. Should be implemented for using in Saver class.
- */
-public interface BaseWriter {
-    /**
-     * Base method for writing collection in file. You should provide Address-Value interpretation for normal writing.
-     *
-     * @param path Full path to file. If file will don't exist, method will try to create it automatically.
-     * @param values Address-value interpretation of Collection.
-     */
-    void writeToFile(String path, LinkedHashMap<String[], String> values);
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/models/validators/WorkerValidator.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/WorkerValidator.java b/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/WorkerValidator.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/WorkerValidator.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,24 +0,0 @@
-package ru.sikion.models.validators;
-
-import ru.sikion.models.Coordinates;
-import ru.sikion.models.Worker;
-
-import java.util.Optional;
-
-/**
- * Implementation of validator for name field. (Worker)
- * *
- * * @since 1.1
- * * @author Sikion
- */
-public class WorkerValidator implements Validator<Worker> {
-    @Override
-    public boolean validate(Worker worker) {
-        Validator<Integer> idValidate = (id) -> id != null && id > 0;
-
-        return idValidate.validate(worker.getId())
-                && new NameValidator().validate(worker.getName())
-                && new CoordXValidator().validate(Optional.of(worker).map(worker::getCoordinates).map(Coordinates::getX).orElse(0))
-                && new CoordYValidator().validate(Optional.of(worker).map(worker::getCoordinates).map(Coordinates::getY).orElse((float) -487));
-    }
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/models/Coordinates.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/models/Coordinates.java b/lab_05-PreFinal/src/main/java/ru/sikion/models/Coordinates.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/models/Coordinates.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,71 +0,0 @@
-package ru.sikion.models;
-
-import java.util.Objects;
-
-/**
- * Model of Coordinates. Sub-model of the Worker. Contains getters/setters of each class fields.
- * Some fields have restrictions. It's signed under every method of field.
- *
- * @see Worker
- */
-public class Coordinates {
-    private Integer x;
-    private float y;
-
-    /**
-     * Restrictions: The value of this field should be Integer.
-     *
-     * @return Value of field x
-     */
-    public Integer getX() {
-        return x;
-    }
-
-    /**
-     * Restrictions: Field cannot be null and the value of this field should be greater than -487.
-     *
-     * @return Value of field y
-     */
-    public float getY() {
-        return y;
-    }
-
-    /**
-     * Restrictions: The value of this field should be greater than -107.
-     *
-     * @param x Value of field x
-     */
-    public void setX(Integer x) {
-        this.x = x;
-    }
-
-    /**
-     * Restrictions: Field cannot be null and the value of this field should be greater than -39.
-     *
-     * @param y Value of field y
-     */
-    public void setY(float y) {
-        this.y = y;
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (o == null || getClass() != o.getClass()) return false;
-        Coordinates that = (Coordinates) o;
-        return Objects.equals(that.x, x) && that.y == y;
-    }
-
-    @Override
-    public int hashCode() {
-        return Objects.hash(x, y);
-    }
-
-    @Override
-    public String toString() {
-        return "Coordinates{" +
-                "x=" + x +
-                ", y=" + y +
-                '}';
-    }
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/models/comparators/WorkerComparator.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/models/comparators/WorkerComparator.java b/lab_05-PreFinal/src/main/java/ru/sikion/models/comparators/WorkerComparator.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/models/comparators/WorkerComparator.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,18 +0,0 @@
-package ru.sikion.models.comparators;
-
-import ru.sikion.models.Worker;
-
-import java.util.Comparator;
-
-/**
- * Compare two Routes by ID (default used)
- *
- * @author Sikion
- * @since 1.0
- */
-public class WorkerComparator implements Comparator<Worker> {
-    @Override
-    public int compare(Worker o1, Worker o2) {
-        return Long.compare(o1.getId(), o2.getId());
-    }
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/exceptions/WrongAmountOfArgumentsException.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/exceptions/WrongAmountOfArgumentsException.java b/lab_05-PreFinal/src/main/java/ru/sikion/exceptions/WrongAmountOfArgumentsException.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/exceptions/WrongAmountOfArgumentsException.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,8 +0,0 @@
-package ru.sikion.exceptions;
-
-public class WrongAmountOfArgumentsException extends Exception {
-    public WrongAmountOfArgumentsException(String msg)
-    {
-        super(msg);
-    }
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/ExitCommand.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/ExitCommand.java b/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/ExitCommand.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/ExitCommand.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,30 +0,0 @@
-package ru.sikion.commandManager.commands;
-
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
-/**
- * Terminates the application (without saving collection).
- *
- * @since 1.0
- * @author Sikion
- */
-public class ExitCommand implements BaseCommand {
-
-    private static final Logger myLogger = Logger.getLogger("com.github.Sikion.lab5");
-    @Override
-    public String getName() {
-        return "exit";
-    }
-
-    @Override
-    public String getDescr() {
-        return "Terminates the application (without saving collection).";
-    }
-
-    @Override
-    public void execute(String[] args) {
-        myLogger.log(Level.FINE, "Выходим из программы...");
-        System.exit(0);
-    }
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/models/Identity/Status.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/models/Identity/Status.java b/lab_05-PreFinal/src/main/java/ru/sikion/models/Identity/Status.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/models/Identity/Status.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,7 +0,0 @@
-package ru.sikion.models.Identity;
-
-public enum Status {
-    FIRED,
-    RECOMMENDED_FOR_PROMOTION,
-    PROBATION,
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/exceptions/UnknownCommandException.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/exceptions/UnknownCommandException.java b/lab_05-PreFinal/src/main/java/ru/sikion/exceptions/UnknownCommandException.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/exceptions/UnknownCommandException.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,16 +0,0 @@
-package ru.sikion.exceptions;
-
-/**
- * Provides a simple exception, indicates that command isn't found in manager
- */
-public class UnknownCommandException extends Exception {
-    /**
-     * Constructor with message.
-     *
-     * @param message Message to show
-     */
-    public UnknownCommandException(String message)
-    {
-        super(message);
-    }
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/models/handlers/userMode/CoordinatesCLIHandler.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/models/handlers/userMode/CoordinatesCLIHandler.java b/lab_05-PreFinal/src/main/java/ru/sikion/models/handlers/userMode/CoordinatesCLIHandler.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/models/handlers/userMode/CoordinatesCLIHandler.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,95 +0,0 @@
-package ru.sikion.models.handlers.userMode;
-
-import ru.sikion.exceptions.BuildObjectException;
-import ru.sikion.exceptions.StreamInterruptedException;
-import ru.sikion.Utilities;
-import ru.sikion.models.Coordinates;
-import ru.sikion.models.handlers.ModuleHandler;
-import ru.sikion.models.validators.CoordXValidator;
-import ru.sikion.models.validators.CoordYValidator;
-
-import java.util.InputMismatchException;
-import java.util.Scanner;
-
-/**
- * Implementation of ModuleHandler for Coordinates Model.
- *
- * @since 1.0
- * @author Sikion
- */
-public class CoordinatesCLIHandler implements ModuleHandler<Coordinates> {
-
-    /**
-     * Method for create fully validated objects by CLI.
-     *
-     * @return Built object
-     */
-    @Override
-    public Coordinates buildObject() throws BuildObjectException {
-        try {
-            System.out.println("Generating object...");
-            Coordinates result = new Coordinates();
-            System.out.println("Welcome to master of Coordinates object creation!");
-            System.out.println("Follow the instructions to setup your object.");
-            System.out.println();
-
-            Scanner scanner = new Scanner(System.in);
-
-            while (true) {
-                try {
-                    CoordXValidator xValidator = new CoordXValidator();
-                    System.out.println("Enter the value of x (Type: double (default value: 0.0d))");
-                    double value = 0;
-                    if (Utilities.hasNextLineOrThrow(scanner)) {
-                        String line = scanner.nextLine();
-                        if (!line.isEmpty())
-                            value = Double.parseDouble(line);
-                    }
-                    if (xValidator.validate(value))
-                        result.setX(value);
-                    else {
-                        System.out.println("Value violates restrictions for field! Try again.");
-                        System.out.println("Restrictions: IEEE 751 Double value. Should be greater than -107.");
-                        continue;
-                    }
-                } catch (InputMismatchException | NumberFormatException e) {
-                    System.out.println("Wrong input! Try again.");
-                    System.out.println("You should enter a positive real number, matches with IEEE 754 Double value standard (not so big/small).");
-                    continue;
-                }
-                break;
-            }
-
-            while (true) {
-                try {
-                    CoordYValidator yValidator = new CoordYValidator();
-                    System.out.println("Enter the value of y (Type: Float)");
-                    Float value = null;
-                    if (Utilities.hasNextLineOrThrow(scanner)) {
-                        String line = scanner.nextLine();
-                        if (!line.isEmpty())
-                            value = Float.valueOf(line);
-                    }
-                    if (yValidator.validate(value))
-                        result.setY(value);
-                    else {
-                        System.out.println("Value violates restrictions for field! Try again.");
-                        System.out.println("Restrictions: IEEE 754 Float number. Not null and should be greater than -39.");
-                        continue;
-                    }
-                } catch (InputMismatchException | NumberFormatException e) {
-                    System.out.println("Wrong input! Try again.");
-                    System.out.println("You should enter a real number, matches with IEEE 754 Float value standard (not so big/small).");
-                    continue;
-                }
-                break;
-            }
-
-            System.out.println("Object setup completed! Sending result...");
-
-            return result;
-        } catch (StreamInterruptedException e) {
-            throw new BuildObjectException("Во время конструирования объекта произошла ошибка: " + e.getMessage());
-        }
-    }
-}
Index: src/main/java/ru/sikion/fileLogic/CSVReader.java
===================================================================
diff --git a/src/main/java/ru/sikion/fileLogic/CSVReader.java b/src/main/java/ru/sikion/fileLogic/CSVReader.java
deleted file mode 100644
--- a/src/main/java/ru/sikion/fileLogic/CSVReader.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,109 +0,0 @@
-package ru.sikion.fileLogic;
-
-import java.io.IOException;
-import java.nio.file.Path;
-import java.util.*;
-import java.util.logging.Level;
-import java.util.logging.Logger;
-import java.util.regex.Pattern;
-
-/**
- * XML Reader class for <code>Loader</code> class. It reads XML file by given path and provides
- * <code>LinkedHashMap&#8249;String[], String></code>, where <code>String[]</code> is XML path to <code>String</code> value.
- *
- * @see LinkedHashMap
- * @since 1.0
- * @author Sikion
- */
-public class CSVReader implements BaseReader {
-
-    private static final Logger myLogger = Logger.getLogger("com.github.Sikion.lab5");
-    private final LinkedHashMap<String[], String> resultParsing;
-
-    private final ArrayDeque<String> values;
-
-    private final ArrayList<String> currentKeys;
-
-    /**
-     * Default constructor of XMLReader.
-     */
-    public CSVReader()
-    {
-        resultParsing = new LinkedHashMap<>();
-        values = new ArrayDeque<>();
-        currentKeys = new ArrayList<>();
-    }
-
-    /**
-     * Reads XML file by path and returns parsed <code>String[]</code>/<code>String</code> map.
-     *
-     * @param path path to XML file
-     * @return Map of read items
-     * @throws IOException If an I/O occurs opening source
-     */
-    public LinkedHashMap<String[], String> readFromFile(String path) throws IOException {
-        Scanner scanner = new Scanner(Path.of(path));
-
-        if (!scanner.hasNextLine())
-        {
-            System.out.println("XML file violates XML format and was skipped.");
-            return resultParsing;
-        }
-
-        scanner.nextLine(); // skip 1st line
-
-        while (scanner.hasNext())
-        {
-            String line = scanner.nextLine();
-            line = line.trim();
-            if (line.isEmpty()) continue;
-
-            String[] regexSplittedLine = line.split("<.*?>");
-            pushValue(regexSplittedLine);
-
-            Pattern nameStartPattern = Pattern.compile("<[^/]*?>");
-            var nameStartPatternMatcher = nameStartPattern.matcher(line);
-            if (nameStartPatternMatcher.find())
-            {
-                String nameStartTag = nameStartPatternMatcher.group();
-                currentKeys.add(nameStartTag.substring(1, nameStartTag.length() - 1));
-            }
-
-            handleCurrentKeyAndValue();
-
-            Pattern nameEndPattern = Pattern.compile("</\\S*?>");
-            var nameEndPatternMatcher = nameEndPattern.matcher(line);
-            if (nameEndPatternMatcher.find())
-            {
-                String nameEndTag = nameEndPatternMatcher.group();
-                currentKeys.remove(nameEndTag.substring(2, nameEndTag.length() - 1));
-            }
-        }
-        return resultParsing;
-    }
-
-    private void handleCurrentKeyAndValue() {
-        if (!values.isEmpty())
-        {
-            String[] keys = new String[currentKeys.size()];
-            int i = 0;
-            for (String key : currentKeys)
-            {
-                keys[i++] = key;
-            }
-
-            myLogger.log(Level.FINE, Arrays.toString(keys) + " " + values.getLast());
-
-            resultParsing.put(keys, values.getLast());
-            values.removeLast();
-        }
-    }
-
-    private void pushValue(String[] regexSplitLine) {
-        for (String e : regexSplitLine)
-        {
-            if (e.isEmpty()) continue;
-            values.addLast(e);
-        }
-    }
-}
\ No newline at end of file
Index: lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/AddCommand.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/AddCommand.java b/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/AddCommand.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/AddCommand.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,59 +0,0 @@
-package ru.sikion.commandManager.commands;
-
-import ru.sikion.exceptions.BuildObjectException;
-import ru.sikion.models.handlers.*;
-import ru.sikion.models.handlers.userMode.RouteCLIHandler;
-import ru.sikion.models.Worker;
-
-import java.util.HashSet;
-
-/**
- * Adds new element to collection.
- *
- * @since 1.0
- * @author Sikion
- */
-public class AddCommand implements BaseCommand {
-    ModuleHandler<Worker> handler;
-
-    /**
-     * Default constructor with handler from 1.0
-     */
-    public AddCommand()
-    {
-        handler = new RouteCLIHandler();
-    }
-    /**
-     * Provides choosing handler
-     *
-     * @param handler ModuleHandler for operating
-     */
-    public AddCommand(ModuleHandler<Worker> handler)
-    {
-        this.handler = handler;
-    }
-
-    @Override
-    public String getName() {
-        return "add";
-    }
-
-    @Override
-    public String getDescr() {
-        return "Adds new element to collection.";
-    }
-
-    @Override
-    public String getArgs() {
-        return "{element}";
-    }
-
-    @Override
-    public void execute(String[] args) throws BuildObjectException {
-        CollectionHandler<HashSet<Worker>, Worker> collectionHandler = WorkersHandler.getInstance();
-
-        collectionHandler.addElementToCollection(handler.buildObject());
-
-        System.out.println("Element added!");
-    }
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/models/handlers/userMode/LocationCLIHandler.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/models/handlers/userMode/LocationCLIHandler.java b/lab_05-PreFinal/src/main/java/ru/sikion/models/handlers/userMode/LocationCLIHandler.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/models/handlers/userMode/LocationCLIHandler.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,123 +0,0 @@
-package ru.sikion.models.handlers.userMode;
-
-import ru.sikion.exceptions.BuildObjectException;
-import ru.sikion.exceptions.StreamInterruptedException;
-import ru.sikion.Utilities;
-import ru.sikion.models.handlers.ModuleHandler;
-import ru.sikion.models.validators.LocationNameValidator;
-import ru.sikion.models.validators.LocationXValidator;
-import ru.sikion.models.validators.LocationYZValidator;
-import ru.sikion.models.validators.Validator;
-
-import java.util.InputMismatchException;
-import java.util.Scanner;
-
-/**
- * Implementation of ModuleHandler for Location Model.
- *
- * @since 1.0
- * @author Sikion
- */
-public class LocationCLIHandler implements ModuleHandler<Location> {
-    /**
-     * Method for create fully validated objects by CLI.
-     *
-     * @return Built object
-     */
-    @Override
-    public Location buildObject() throws BuildObjectException {
-        try {
-            System.out.println("Generating object...");
-            Location result = new Location();
-            System.out.println("Welcome to master of Location object creation!");
-            System.out.println("Follow the instructions to setup your object.");
-            System.out.println();
-
-            Scanner scanner = new Scanner(System.in);
-
-            Validator<Float> locationXValidator = new LocationXValidator();
-
-            while (true) {
-                try {
-                    System.out.println("Enter the value of x (Type: float (default value: 0.0f))");
-                    float value = 0;
-                    if (Utilities.hasNextLineOrThrow(scanner)) {
-                        String line = scanner.nextLine();
-                        if (!line.isEmpty())
-                            value = Float.parseFloat(line);
-                    }
-                    if (!locationXValidator.validate(value)) {
-                        System.out.println("Value violates restrictions for field! Try again.");
-                        System.out.println("Restrictions: IEEE 754 Float value.");
-                        continue;
-                    }
-                    result.setX(value);
-                } catch (InputMismatchException | NumberFormatException e) {
-                    System.out.println("Wrong input! Try again.");
-                    System.out.println("You should enter a real number, matches with IEEE 754 Float value standard (not so big/small).");
-                    continue;
-                }
-                break;
-            }
-
-            LocationYZValidator yzValidator = new LocationYZValidator();
-
-
-            String yInvitation = "Enter the value of y (Type: Long)";
-            result.setY(handleYZInput(scanner, yzValidator, yInvitation));
-
-            String zInvitation = "Enter the value of z (Type: Long)";
-            result.setZ(handleYZInput(scanner, yzValidator, zInvitation));
-
-            while (true) {
-                LocationNameValidator nameValidator = new LocationNameValidator();
-                System.out.println("Enter the value of name (Type: String)");
-                System.out.println("This field may be skipped to fill");
-                String value = null;
-                if (Utilities.hasNextLineOrThrow(scanner)) {
-                    String line = scanner.nextLine();
-                    if (!line.isEmpty())
-                        value = line;
-                }
-                if (!nameValidator.validate(value)) {
-                    System.out.println("Value violates restrictions for field! Try again.");
-                    System.out.println("Restrictions: Should be not empty.");
-                    continue;
-                }
-                result.setName(value);
-                break;
-            }
-
-            System.out.println("Object setup completed! Sending result...");
-
-            return result;
-        } catch (StreamInterruptedException e) {
-            throw new BuildObjectException("Во время конструирования объекта произошла ошибка: " + e.getMessage());
-        }
-    }
-
-    private Long handleYZInput(Scanner scanner, Validator<Long> yzValidator, String invitation) throws StreamInterruptedException {
-        Long value = null;
-        while (true) {
-            try {
-                System.out.println(invitation);
-                if (Utilities.hasNextLineOrThrow(scanner)) {
-                    String line = scanner.nextLine();
-                    if (!line.isEmpty())
-                        value = Long.valueOf(line);
-                }
-                if (!yzValidator.validate(value)) {
-                    System.out.println("Value violates restrictions for field! Try again.");
-                    System.out.println("Restrictions: Number should be in range [-9223372036854775808; 9223372036854775807] and not null.");
-                    continue;
-                }
-            } catch (InputMismatchException | NumberFormatException e) {
-                System.out.println("Wrong input! Try again.");
-                System.out.println("You should enter a number in range [-9223372036854775808; 9223372036854775807], it shouldn't be decimal.");
-                continue;
-            }
-            break;
-        }
-        return value;
-    }
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/models/handlers/ModuleHandler.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/models/handlers/ModuleHandler.java b/lab_05-PreFinal/src/main/java/ru/sikion/models/handlers/ModuleHandler.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/models/handlers/ModuleHandler.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,21 +0,0 @@
-package ru.sikion.models.handlers;
-
-import ru.sikion.exceptions.BuildObjectException;
-
-/**
- * Base interface for ModelHandler. Uses for building objects.
- *
- * @param <T> Type of building module.
- *
- * @since 1.0
- * @author Sikion
- */
-public interface ModuleHandler<T> {
-
-    /**
-     * Provides method to generate objects.
-     *
-     * @return Created object.
-     */
-    T buildObject() throws BuildObjectException;
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/models/validators/NameValidator.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/NameValidator.java b/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/NameValidator.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/NameValidator.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,19 +0,0 @@
-package ru.sikion.models.validators;
-
-/**
- * Name validator. Checks if name is not empty.
- * @version 1.0
- * @author Sikion
- */
-
-public class NameValidator implements Validator<String>{
-    /**
-     * Validates name.
-     * @param value name to validate
-     * @return true if name is not empty. Otherwise, false.
-     */
-    @Override
-    public boolean validate(String value) {
-        return (value != null && !(value.isEmpty() || value.isBlank()));
-    }
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/models/validators/NationalityValidator.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/NationalityValidator.java b/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/NationalityValidator.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/NationalityValidator.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,18 +0,0 @@
-package ru.sikion.models.validators;
-
-
-import ru.sikion.models.Identity.Country;
-import ru.sikion.models.Identity.EyeColor;
-
-public class NationalityValidator implements Validator<Country> {
-    /**
-     * Validates hair color.
-     *
-     * @param value hair color to validate
-     * @return true if value from Country and can be null. Otherwise, false.
-     */
-    @Override
-    public boolean validate(Country value) {
-        return true;
-    }
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/models/validators/CoordYValidator.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/CoordYValidator.java b/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/CoordYValidator.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/CoordYValidator.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,20 +0,0 @@
-package ru.sikion.models.validators;
-
-/**
- * Coordinates validator. Checks if coordinates is not null.
- *
- * @author Sikion
- * @version 1.0
- */
-public class CoordYValidator implements Validator<Float> {
-    /**
-     * Validates coordinates.
-     *
-     * @param value coordinates to validate
-     * @return true if coordinates greater than -487. Otherwise, false.
-     */
-    @Override
-    public boolean validate(Float value) {
-        return value != null && value >= -487 && value != Float.POSITIVE_INFINITY;
-    }
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/models/validators/StatusValidator.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/StatusValidator.java b/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/StatusValidator.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/StatusValidator.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,23 +0,0 @@
-package ru.sikion.models.validators;
-
-
-import ru.sikion.models.Identity.Status;
-
-/**
- * Status validator. Checks if status is correct.
- *
- * @author Sikion
- * @version 1.0
- */
-public class StatusValidator implements Validator<Status> {
-    /**
-     * Validates status.
-     *
-     * @param value status to validate
-     * @return true if instance of Status, can be null. Otherwise, false.
-     */
-    @Override
-    public boolean validate(Status value) {
-        return true;
-    }
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/models/validators/EyeColorValidator.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/EyeColorValidator.java b/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/EyeColorValidator.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/EyeColorValidator.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,17 +0,0 @@
-package ru.sikion.models.validators;
-
-
-import ru.sikion.models.Identity.EyeColor;
-
-public class EyeColorValidator implements Validator<EyeColor> {
-    /**
-     * Validates hair color.
-     *
-     * @param value eye color to validate
-     * @return true if value from HairColor and can be null. Otherwise, false.
-     */
-    @Override
-    public boolean validate(EyeColor value) {
-        return true;
-    }
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/HelpCommand.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/HelpCommand.java b/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/HelpCommand.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/HelpCommand.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,41 +0,0 @@
-package ru.sikion.commandManager.commands;
-
-import ru.sikion.commandManager.CommandManager;
-
-import java.util.Optional;
-
-/**
- * Shows reference about available commands.
- *
- * @author Sikion
- * @since 1.0
- */
-public class HelpCommand implements BaseCommand {
-    @Override
-    public String getName() {
-        return "help";
-    }
-
-    @Override
-    public String getDescr() {
-        return "Shows reference about available commands.";
-    }
-
-    @Override
-    public void execute(String[] args) {
-        CommandManager manager = new CommandManager();
-
-        if (args.length == 1)
-        {
-            manager.getCommands().forEach((name,command) -> System.out.println(name + " " + command.getArgs() + " --  " + command.getDescr()));
-        }
-        else
-        {
-            for (int i = 1; i < args.length; i++)
-            {
-                var command = manager.getCommands().get(args[i]);
-                System.out.println(args[i] + " -- " + Optional.ofNullable(command).map(BaseCommand::getDescr).orElse("This command is not found in manager"));
-            }
-        }
-    }
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/InfoCommand.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/InfoCommand.java b/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/InfoCommand.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/InfoCommand.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,36 +0,0 @@
-package ru.sikion.commandManager.commands;
-
-import ru.sikion.models.Worker;
-import ru.sikion.models.handlers.CollectionHandler;
-import ru.sikion.models.handlers.WorkersHandler;
-
-import java.util.HashSet;
-
-/**
- * Shows information about the collection.
- *
- * @since 1.0
- * @author Sikion
- */
-public class InfoCommand implements BaseCommand {
-    @Override
-    public String getName() {
-        return "info";
-    }
-
-    @Override
-    public String getDescr() {
-        return "Shows information about the collection.";
-    }
-
-    @Override
-    public void execute(String[] args) {
-        CollectionHandler<HashSet<Worker>, Worker> handler = WorkersHandler.getInstance();
-
-        HashSet<Worker> collection = handler.getCollection();
-
-        System.out.println("Now you are operating with collection of type " + collection.getClass().getName() + ", filled with elements of type " + handler.getFirstOrNew().getClass().getName());
-        System.out.println("Size of the collection is " + collection.size());
-        System.out.println("Init date: " + handler.getInitDate());
-    }
-}
Index: lab_05-PreFinal/pom.xml
===================================================================
diff --git a/lab_05-PreFinal/pom.xml b/lab_05-PreFinal/pom.xml
deleted file mode 100644
--- a/lab_05-PreFinal/pom.xml	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,17 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project xmlns="http://maven.apache.org/POM/4.0.0"
-         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-    <modelVersion>4.0.0</modelVersion>
-
-    <groupId>org.example</groupId>
-    <artifactId>lab_05</artifactId>
-    <version>1.0-SNAPSHOT</version>
-
-    <properties>
-        <maven.compiler.source>19</maven.compiler.source>
-        <maven.compiler.target>19</maven.compiler.target>
-        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-    </properties>
-
-</project>
\ No newline at end of file
Index: lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/ShowCommand.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/ShowCommand.java b/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/ShowCommand.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/ShowCommand.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,37 +0,0 @@
-package ru.sikion.commandManager.commands;
-
-import ru.sikion.models.Worker;
-import ru.sikion.models.handlers.CollectionHandler;
-import ru.sikion.models.handlers.WorkersHandler;
-
-import java.util.HashSet;
-
-/**
- * Shows every element of the collection in toString() interpretation.
- *
- * @since 1.0
- * @author Sikion
- */
-public class ShowCommand implements BaseCommand {
-    @Override
-    public String getName() {
-        return "show";
-    }
-
-    @Override
-    public String getDescr() {
-        return "Shows every element of the collection in toString() interpretation.";
-    }
-
-    @Override
-    public void execute(String[] args) {
-        CollectionHandler<HashSet<Worker>, Worker> handler = WorkersHandler.getInstance();
-
-        handler.getCollection().forEach(System.out::println);
-
-        if (handler.getCollection().isEmpty())
-        {
-            System.out.println("There's nothing to show.");
-        }
-    }
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/models/Identity/HairColor.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/models/Identity/HairColor.java b/lab_05-PreFinal/src/main/java/ru/sikion/models/Identity/HairColor.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/models/Identity/HairColor.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,30 +0,0 @@
-package ru.sikion.models.Identity;
-
-
-public enum HairColor {
-    BLACK("\u001B[35m"),
-    BLOND("\u001B[34m"),
-    BROWN("\u001B[33m"),
-    FAIR("\u001B[32m"),
-    GINGER("\u001B[30m"),
-    GREY("\u001B[36m"),
-    RED("\u001B[36m"),
-    DYED("\u001B[37m"),
-    BALD("\u001B[0m");
-
-    private final String title;
-
-    HairColor(String title) {
-        this.title = title;
-    }
-
-    public String getTitle() {
-        return title;
-    }
-
-    @Override
-    public String toString() {
-        return this.title;
-    }
-
-}
\ No newline at end of file
Index: lab_05-PreFinal/src/main/java/ru/sikion/models/validators/HairColorValidator.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/HairColorValidator.java b/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/HairColorValidator.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/HairColorValidator.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,17 +0,0 @@
-package ru.sikion.models.validators;
-
-
-import ru.sikion.models.Identity.HairColor;
-
-public class HairColorValidator implements Validator<HairColor> {
-    /**
-     * Validates hair color.
-     *
-     * @param value hair color to validate
-     * @return true if hair color is not empty and value from HairColor. Otherwise, false.
-     */
-    @Override
-    public boolean validate(HairColor value) {
-        return value != null;
-    }
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/models/Person.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/models/Person.java b/lab_05-PreFinal/src/main/java/ru/sikion/models/Person.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/models/Person.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,98 +0,0 @@
-package ru.sikion.models;
-
-import ru.sikion.models.Identity.Country;
-import ru.sikion.models.Identity.EyeColor;
-import ru.sikion.models.Identity.HairColor;
-
-import java.util.Objects;
-
-/**
- * Model of Person. Contains getters/setters of each class fields.
- * Some fields have restrictions. It's signed under every method of field.
- *
- * @author Sikion
- * @since 1.0
- */
-
-public class Person {
-    private EyeColor eyeColor;
-    private HairColor hairColor;
-    private Country nationality;
-
-
-    /**
-     * Restrictions: Field can be null.
-     *
-     * @return Eye color of the worker
-     */
-    public EyeColor getEyeColor() {
-        return eyeColor;
-    }
-
-    /**
-     * Restrictions: Field cannot be null.
-     *
-     * @return Hair color of the worker
-     */
-    public HairColor getHairColor() {
-        return hairColor;
-    }
-
-    /**
-     * Restrictions: Field can be null.
-     *
-     * @return Nationality of the worker
-     */
-    public Country getNationality() {
-        return nationality;
-    }
-
-
-    /**
-     * Restrictions: Field can be null.
-     *
-     * @param eyeColor eye color value to set
-     */
-    public void setEyeColor(EyeColor eyeColor) {
-        this.eyeColor = eyeColor;
-    }
-
-    /**
-     * Restrictions: Field cannot be null.
-     *
-     * @param hairColor hair color value to set
-     */
-    public void setHairColor(HairColor hairColor) {
-        this.hairColor = hairColor;
-    }
-
-    /**
-     * Restrictions: Field can be null.
-     *
-     * @param nationality value to set
-     */
-    public void setNationality(Country nationality) {
-        this.nationality = nationality;
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (!(o instanceof Person person)) return false;
-        return getEyeColor() == person.getEyeColor() && getHairColor() == person.getHairColor() && getNationality() == person.getNationality();
-    }
-
-    @Override
-    public int hashCode() {
-        return Objects.hash(getEyeColor(), getHairColor(), getNationality());
-    }
-
-    @Override
-    public String toString() {
-        return "Person{" +
-                "eyeColor=" + eyeColor +
-                ", hairColor=" + hairColor +
-                ", nationality=" + nationality +
-                '}';
-    }
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/RemoveGreaterCommand.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/RemoveGreaterCommand.java b/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/RemoveGreaterCommand.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/RemoveGreaterCommand.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,86 +0,0 @@
-//package ru.sikion.commandManager.commands;
-//
-//import ru.sikion.exceptions.BuildObjectException;
-//import ru.sikion.models.Worker;
-//import ru.sikion.models.comparators.RouteDistanceComparator;
-//import ru.sikion.models.handlers.CollectionHandler;
-//import ru.sikion.models.handlers.ModuleHandler;
-//import ru.sikion.models.handlers.WorkersHandler;
-//import ru.sikion.models.handlers.userMode.RouteCLIHandler;
-//
-//import java.util.TreeMap;
-//
-///**
-// * Removes elements from collection greater than given in argument.
-// *
-// * @since 1.0
-// * @author Sikion
-// */
-//public class RemoveGreaterCommand implements BaseCommand {
-//
-//    ModuleHandler<Worker> handler;
-//
-//    /**
-//     * Default constructor with handler from 1.0
-//     */
-//    public RemoveGreaterCommand()
-//    {
-//        handler = new RouteCLIHandler();
-//    }
-//
-//    /**
-//     * Provides choosing handler
-//     *
-//     * @since 1.1
-//     * @param handler ModuleHandler for operating
-//     */
-//    public RemoveGreaterCommand(ModuleHandler<Worker> handler)
-//    {
-//        this.handler = handler;
-//    }
-//    @Override
-//    public String getName() {
-//        return "remove_greater";
-//    }
-//
-//    @Override
-//    public String getDescr() {
-//        return "Removes elements from collection greater than given in argument. Comparing is set by distance.";
-//    }
-//
-//    @Override
-//    public String getArgs() {
-//        return "{element}";
-//    }
-//    @Override
-//    public void execute(String[] args) throws BuildObjectException {
-//        RouteDistanceComparator comparator = new RouteDistanceComparator();
-//
-//        CollectionHandler<TreeMap<Worker>, Worker> collectionHandler = WorkersHandler.getInstance();
-//
-//        Worker greaterThan = handler.buildObject();
-//        System.out.println("Distance: " + greaterThan.getDistance());
-//        var iterator = collectionHandler.getCollection().iterator();
-//
-//        int count = 0;
-//
-//        while (iterator.hasNext())
-//        {
-//            var current = iterator.next();
-//            System.out.print("Comparing: current -- " + current.getDistance() + " vs " + greaterThan.getDistance());
-//            if (comparator.compare(current, greaterThan) > 0)
-//            {
-//                System.out.println(" -- Greater / Removing...");
-//                System.out.println("Removing element: " + current);
-//                iterator.remove();
-//                count++;
-//            }
-//            else
-//            {
-//                System.out.println(" -- Lower.");
-//            }
-//        }
-//
-//        System.out.println("Removed " + count + " elements");
-//    }
-//}
Index: lab_05-PreFinal/src/main/java/ru/sikion/models/handlers/CollectionHandler.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/models/handlers/CollectionHandler.java b/lab_05-PreFinal/src/main/java/ru/sikion/models/handlers/CollectionHandler.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/models/handlers/CollectionHandler.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,89 +0,0 @@
-package ru.sikion.models.handlers;
-
-import java.util.AbstractCollection;
-import java.util.Comparator;
-import java.util.Date;
-
-/**
- * Base interface for handling Collection of Elements. You should implement it in your handler for correct command working.
- *
- * @param <T> Type of Collection
- * @param <E> Type of Elements
- *
- * @since 1.0
- * @author Sikion
- */
-public interface CollectionHandler<T extends AbstractCollection<E>, E> {
-    /**
-     * Provides method for get collection.
-     *
-     * @return Actual collection reference
-     */
-    T getCollection();
-
-    /**
-     * Provides method for set collection.
-     *
-     * @param value Collection
-     */
-    void setCollection(T value);
-
-    /**
-     * Provides method for fast adding element in collection.
-     *
-     * @param value Element to add
-     */
-    void addElementToCollection(E value);
-
-    /**
-     * Provides method for fast clear element in collection.
-     */
-    void clearCollection();
-
-    /**
-     * Provides method for fast sorting collection. You can ignore this method.
-     */
-    void sort();
-
-    /**
-     * Provides method for fast getting first element.
-     *
-     * @return First element. If collection was empty, creates new Element and returns it.
-     */
-    E getFirstOrNew();
-
-    /**
-     * Provides method for get collection initDate.
-     *
-     * @return Date instance -- Collection created time.
-     */
-    Date getInitDate();
-
-    /**
-     * Provides method for getting last element.
-     *
-     * @return Last element. If collection was empty, returns null.
-     */
-    E getLastElement();
-
-    /**
-     * Provides method for validate elements in collection. You can ignore this method
-     */
-    void validateElements();
-
-    /**
-     * Gets min element by given comparator
-     *
-     * @param comparator Comparator to compare.
-     * @return Min element or null if collection is empty
-     */
-    E getMin(Comparator<E> comparator);
-
-    /**
-     * Gets max element by given comparator
-     *
-     * @param comparator Comparator to compare.
-     * @return Max element or null if collection is empty
-     */
-    E getMax(Comparator<E> comparator);
-}
\ No newline at end of file
Index: lab_05-PreFinal/src/main/java/ru/sikion/models/validators/EndDateValidator.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/EndDateValidator.java b/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/EndDateValidator.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/EndDateValidator.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,22 +0,0 @@
-package ru.sikion.models.validators;
-
-import java.time.LocalDate;
-
-/**
- * End date validator. Checks if end date is not null.
- *
- * @author Sikion
- * @version 1.0
- */
-public class EndDateValidator implements Validator<LocalDate> {
-    /**
-     * Validates end date.
-     *
-     * @param value end date to validate
-     * @return true if date is date. Otherwise, false.
-     */
-    @Override
-    public boolean validate(LocalDate value) {
-        return true;
-    }
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/exceptions/StreamInterruptedException.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/exceptions/StreamInterruptedException.java b/lab_05-PreFinal/src/main/java/ru/sikion/exceptions/StreamInterruptedException.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/exceptions/StreamInterruptedException.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,7 +0,0 @@
-package ru.sikion.exceptions;
-
-public class StreamInterruptedException extends Exception {
-    public StreamInterruptedException(String msg) {
-        super(msg);
-    }
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/ExecuteScriptCommand.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/ExecuteScriptCommand.java b/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/ExecuteScriptCommand.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/ExecuteScriptCommand.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,81 +0,0 @@
-package ru.sikion.commandManager.commands;
-
-import ru.sikion.commandManager.CommandExecutor;
-import ru.sikion.commandManager.CommandMode;
-import ru.sikion.exceptions.WrongAmountOfArgumentsException;
-import ru.sikion.Utilities;
-
-import java.io.FileInputStream;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.nio.file.Files;
-import java.nio.file.InvalidPathException;
-import java.nio.file.NoSuchFileException;
-import java.nio.file.Path;
-import java.util.ArrayDeque;
-import java.util.logging.Level;
-import java.util.logging.Logger;
-import java.util.regex.Pattern;
-
-/**
- * Reads and executes script from file.
- *
- * @since 1.0
- * @author Sikion
- */
-public class ExecuteScriptCommand implements BaseCommand {
-
-    private static final Logger myLogger = Logger.getLogger("com.github.Sikion.lab5");
-    @Override
-    public String getName() {
-        return "execute_script";
-    }
-
-    @Override
-    public String getDescr() {
-        return "Reads and executes script from file.";
-    }
-
-    @Override
-    public String getArgs() {
-        return "file_path";
-    }
-    @Override
-    public void execute(String[] args) throws IllegalArgumentException, WrongAmountOfArgumentsException {
-        Utilities.checkArgumentsOrThrow(args.length, 1);
-
-        try {
-            CommandExecutor executor = new CommandExecutor();
-            if (checkRecursion(Path.of(args[1]), new ArrayDeque<>())) {
-                myLogger.log(Level.WARNING, "При анализе скрипта обнаружена рекурсия. Устраните ее перед исполнением.");
-                return;
-            }
-            myLogger.log(Level.INFO, "Executing script " + args[1]);
-            executor.startExecuting(new FileInputStream(Path.of(args[1]).toFile()), CommandMode.NonUserMode);
-        } catch (InvalidPathException e) {
-            System.out.println("Provided argument path isn't legal. Try again.");
-            throw new IllegalArgumentException(e);
-        } catch (FileNotFoundException | NoSuchFileException e) {
-            System.out.println("File not found! Try again.");
-        } catch (SecurityException e) {
-            System.out.println("Access denied. Try again with another file.");
-        } catch (IOException e) {
-            System.out.println("Something went wrong during file handling. Try again. (" + e.getMessage() + ")");
-        }
-    }
-
-    private boolean checkRecursion(Path path, ArrayDeque<Path> stack) throws IOException {
-        if (stack.contains(path)) return true;
-        stack.addLast(path);
-        String str = Files.readString(path);
-        Pattern pattern = Pattern.compile("execute_script .*");
-        var patternMatcher = pattern.matcher(str);
-        while (patternMatcher.find())
-        {
-            Path newPath = Path.of(patternMatcher.group().split(" ")[1]);
-            if(checkRecursion(newPath, stack)) return true;
-        }
-        stack.removeLast();
-        return false;
-    }
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/models/handlers/userMode/RouteCLIHandler.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/models/handlers/userMode/RouteCLIHandler.java b/lab_05-PreFinal/src/main/java/ru/sikion/models/handlers/userMode/RouteCLIHandler.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/models/handlers/userMode/RouteCLIHandler.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,127 +0,0 @@
-package ru.sikion.models.handlers.userMode;
-
-import ru.sikion.exceptions.BuildObjectException;
-import ru.sikion.exceptions.StreamInterruptedException;
-import ru.sikion.Utilities;
-import ru.sikion.models.Worker;
-import ru.sikion.models.handlers.*;
-import ru.sikion.models.validators.DistanceValidator;
-import ru.sikion.models.validators.NameValidator;
-import ru.sikion.models.validators.Validator;
-
-import java.time.Instant;
-import java.util.Date;
-import java.util.InputMismatchException;
-import java.util.Scanner;
-
-/**
- * Implementation of ModuleHandler for Worker Model.
- *
- * @since 1.0
- * @author Sikion
- */
-public class RouteCLIHandler implements ModuleHandler<Worker> {
-    /**
-     * Method for create fully validated objects by CLI (userMode).
-     *
-     * @return Built object
-     */
-    @Override
-    public Worker buildObject() throws BuildObjectException {
-        try {
-            System.out.println("Generating object...");
-            Worker result = new Worker();
-            System.out.println("Welcome to master of Worker object creation!");
-            System.out.println("Follow the instructions to setup your object.");
-            System.out.println();
-
-            Scanner scanner = new Scanner(System.in);
-
-            // id
-            result.setId(RouteHandlers.generateID());
-
-            // name
-            Validator<String> nameValidator = new NameValidator();
-            String name = null;
-            do {
-                System.out.println("Enter the value of name (Type: String)");
-                if (Utilities.hasNextLineOrThrow(scanner)) {
-                    String line = scanner.nextLine();
-                    if (!line.isEmpty())
-                        name = line;
-                }
-                if (!nameValidator.validate(name)) {
-                    System.out.println("Value violates restrictions for field! Try again.");
-                    System.out.println("Restrictions: Should be not null and not empty.");
-                }
-            } while (!nameValidator.validate(name));
-            result.setName(name);
-
-            // coords
-            System.out.println("Starting coordinates field setup... (Type: Coordinates)");
-            CoordinatesCLIHandler coordinatesCLIHandler = new CoordinatesCLIHandler();
-            result.setCoordinates(coordinatesCLIHandler.buildObject());
-
-            // from (may null)
-            System.out.println("Starting \"from\" field setup... (Type: Location)");
-            System.out.print("This field may be skipped to fill. Skip? [y/n] ");
-            String answer = scanner.next();
-            if (!answer.equalsIgnoreCase("y")) {
-                LocationCLIHandler locationCLIHandler = new LocationCLIHandler();
-                result.setFrom(locationCLIHandler.buildObject());
-            }
-            if (Utilities.hasNextLineOrThrow(scanner)) {
-                scanner.nextLine();
-            }
-
-            // to (may null)
-            System.out.println("Starting \"to\" field setup... (Type: Location)");
-            System.out.print("This field may be skipped to fill. Skip? [y/n] ");
-            answer = scanner.next();
-            if (!answer.equalsIgnoreCase("y")) {
-                LocationCLIHandler locationCLIHandler = new LocationCLIHandler();
-                result.setTo(locationCLIHandler.buildObject());
-            }
-            if (Utilities.hasNextLineOrThrow(scanner)) {
-                scanner.nextLine();
-            }
-
-            // distance
-            while (true) {
-                try {
-                    DistanceValidator validator = new DistanceValidator();
-                    System.out.println("Enter the value of distance (Type: int (default value: 0))");
-                    int value = 0;
-                    if (Utilities.hasNextLineOrThrow(scanner)) {
-                        String line = scanner.nextLine();
-                        if (!line.isEmpty())
-                            value = Integer.parseInt(line);
-                    }
-                    if (!validator.validate(value)) {
-                        System.out.println("Value violates restrictions for field! Try again.");
-                        System.out.println("Restrictions: Number should be grater than 1.");
-                        continue;
-                    }
-                    result.setDistance(value);
-                } catch (InputMismatchException | NumberFormatException e) {
-                    System.out.println("Wrong input! Try again.");
-                    System.out.println("You should enter a number in range [-2147483648; 2147483647], it shouldn't be decimal.");
-                    continue;
-                }
-                break;
-            }
-
-            // creationDate
-            Date creationDate = Date.from(Instant.now());
-            System.out.println("Object created at " + creationDate);
-            result.setCreationDate(creationDate);
-
-            System.out.println("Object setup completed! Sending result...");
-
-            return result;
-
-        } catch (StreamInterruptedException e) {
-            throw new BuildObjectException("Во время конструирования объекта произошла ошибка: " + e.getMessage());
-        }
-    }
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/models/validators/Validator.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/Validator.java b/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/Validator.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/Validator.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,21 +0,0 @@
-package ru.sikion.models.validators;
-
-
-/**
- * Base validator. You should implement it for use in handlers.
- *
- * @author Sikion
- * @param <T> Type of validation value.
- * @version 1.0
- */
-
-@FunctionalInterface
-public interface Validator<T> {
-    /**
-     * Provides validation method.
-     *
-     * @param value value to validate
-     * @return true if value is validate. Otherwise false.
-     */
-    boolean validate(T value);
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/BaseCommand.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/BaseCommand.java b/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/BaseCommand.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/BaseCommand.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,44 +0,0 @@
-package ru.sikion.commandManager.commands;
-
-import ru.sikion.exceptions.BuildObjectException;
-import ru.sikion.exceptions.WrongAmountOfArgumentsException;
-
-/**
- * Base interface for command implementation. You should implement it before applying command in CommandManager
- *
- * @since 1.0
- * @author Sikion
- */
-public interface BaseCommand {
-    /**
-     * Base method for show command name
-     *
-     * @return command name
-     */
-    String getName();
-
-    /**
-     * Base method for show command description.
-     *
-     * @return command description
-     */
-    String getDescr();
-
-    /**
-     * Base method for show command arguments
-     *
-     * @return command arguments pattern
-     */
-    default String getArgs()
-    {
-        return "";
-    }
-
-    /**
-     * Base method for command executing.
-     *
-     * @param args full array of entered line.
-     * @throws IllegalArgumentException when command can't understand given arguments
-     */
-    void execute(String[] args) throws IllegalArgumentException, BuildObjectException, WrongAmountOfArgumentsException;
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/fileLogic/BaseReader.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/fileLogic/BaseReader.java b/lab_05-PreFinal/src/main/java/ru/sikion/fileLogic/BaseReader.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/fileLogic/BaseReader.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,23 +0,0 @@
-package ru.sikion.fileLogic;
-
-import java.io.IOException;
-import java.util.LinkedHashMap;
-
-/**
- * Base Reader interface. Should be implemented for using in Loader class.
- *
- * @see Loader
- * @since 1.0
- * @author Sikion
- */
-public interface BaseReader {
-
-    /**
-     * Base method for reading file and providing Address-Value interpretation of this File.
-     *
-     * @param path Full path to file.
-     * @return Collection of values with full address from File.
-     * @throws IOException When something will go wrong during file handling
-     */
-    LinkedHashMap<String[], String> readFromFile(String path) throws IOException;
-}
Index: lab_05-PreFinal/src/main/java/ru/sikion/models/handlers/nonUserMode/WorkerNonCLIHandler.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/models/handlers/nonUserMode/WorkerNonCLIHandler.java b/lab_05-PreFinal/src/main/java/ru/sikion/models/handlers/nonUserMode/WorkerNonCLIHandler.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/models/handlers/nonUserMode/WorkerNonCLIHandler.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,138 +0,0 @@
-//package ru.sikion.models.handlers.nonUserMode;
-//
-//import ru.sikion.exceptions.BuildObjectException;
-//import ru.sikion.models.Coordinates;
-//import ru.sikion.models.Identity.EyeColor;
-//import ru.sikion.models.Person;
-//import ru.sikion.models.Worker;
-//import ru.sikion.models.handlers.ModuleHandler;
-//import ru.sikion.models.handlers.WorkersHandler;
-//import ru.sikion.models.validators.WorkerValidator;
-//import ru.sikion.models.validators.Validator;
-//
-//import java.time.Instant;
-//import java.util.ArrayList;
-//import java.util.Date;
-//import java.util.Scanner;
-//import java.util.logging.Level;
-//import java.util.logging.Logger;
-//
-///**
-// * Implementation of Worker ModelHandler for non-User Mode.
-// *
-// * @since 1.1
-// * @author Sikion
-// */
-//public class WorkerNonCLIHandler implements ModuleHandler<Worker> {
-//
-//    private static final Logger myLogger = Logger.getLogger("com.github.Sikion.lab5");
-//
-//    Scanner scanner;
-//
-//    /**
-//     * Constructor for setup handler's scanner.
-//     *
-//     * @param scanner Command scanner for reading argument
-//     */
-//    public WorkerNonCLIHandler(Scanner scanner) {
-//        this.scanner = scanner;
-//    }
-//
-//    @Override
-//    public Worker buildObject() throws BuildObjectException {
-//        System.out.println("Generating object...");
-//        Worker result = new Worker();
-//        int valuesToRead = 12;
-//        int coordsIndex = 1;
-//        int fromIndex = 3;
-//        int toIndex = 7;
-//        ArrayList<String> values = new ArrayList<>(valuesToRead);
-//
-//        for (int i = 0; i < valuesToRead && scanner.hasNextLine(); i++)
-//        {
-//            String line = scanner.nextLine();
-//            if (!line.isEmpty())
-//                values.add(line);
-//            else
-//            {
-//                values.add(null);
-//
-//                if (i == coordsIndex)
-//                {
-//                    valuesToRead -= 1;
-//                    fromIndex -= 1;
-//                    toIndex -= 1;
-//                }
-//
-//                if (i == fromIndex)
-//                {
-//                    valuesToRead -= 3;
-//                    toIndex -= 3;
-//                }
-//
-//                if (i == toIndex)
-//                {
-//                    valuesToRead -= 3;
-//                }
-//            }
-//        }
-//
-//        try {
-//            result.setId(WorkersHandler.generateID());
-//            result.setName(values.get(0));
-//            System.out.println("Name: " + result.getName());
-//            if (values.get(coordsIndex) != null) {
-//                System.out.println("Generating coordinates...");
-//                Coordinates coordinates = new Coordinates();
-//                coordinates.setX(Integer.parseInt(values.get(coordsIndex)));
-//                System.out.println("Coords X: " + coordinates.getX());
-//                coordinates.setY(Float.parseFloat(values.get(coordsIndex + 1)));
-//                System.out.println("Coords Y: " + coordinates.getY());
-//                result.setCoordinates(coordinates);
-//            }
-//            System.out.println("Coords: " + result.getCoordinates());
-//            result.setFrom(generateLocation(fromIndex, values));
-//            System.out.println("From: " + result.getFrom());
-//            result.setTo(generateLocation(toIndex, values));
-//            System.out.println("To: " + result.getTo());
-//            result.setDistance(Integer.parseInt(values.get(values.size() - 1)));
-//            System.out.println("Distance: " + result.getDistance());
-//            result.setCreationDate(Date.from(Instant.now()));
-//            System.out.println("Generated at: " + result.getCreationDate());
-//            System.out.println("Object generated! Validating result...");
-//
-//            Validator<Worker> validator = new WorkerValidator();
-//            if (!validator.validate(result))
-//            {
-//                System.out.println("Object's invalid, skipping...");
-//                throw new BuildObjectException("Созданный элемент нарушает ограничения и не может быть добавлен в коллекцию!");
-//            }
-//            System.out.println("Validate successful! Sending result...");
-//
-//            return result;
-//
-//        } catch (NumberFormatException | NullPointerException e)
-//        {
-//            myLogger.log(Level.WARNING, "Объект будет пропущен. Устраните ошибку в скрипте и повторите попытку.");
-//            throw new BuildObjectException("Предоставленные данные для построения объекта неверны. Воспользуйтесь ручным вводом или исправьте команду в скрипте.");
-//        }
-//    }
-//
-//    private Person generateLocation(int toIndex, ArrayList<String> values) {
-//        Person obj = null;
-//        if (values.get(toIndex) != null)
-//        {
-//            System.out.println("Generating personality...");
-//            obj = new Person();
-//            obj.setEyeColor(EyeColor.StringtoIndex);
-//            System.out.println("X: " + obj.getX());
-//            obj.setY(Long.valueOf(values.get(toIndex + 1)));
-//            System.out.println("Y: " + obj.getX());
-//            obj.setZ(Long.valueOf(values.get(toIndex + 2)));
-//            System.out.println("Z: " + obj.getX());
-//            obj.setName(values.get(toIndex + 3));
-//            System.out.println("Name:" + obj.getName());
-//        }
-//        return obj;
-//    }
-//}
Index: lab_05-PreFinal/src/main/java/ru/sikion/models/validators/CoordXValidator.java
===================================================================
diff --git a/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/CoordXValidator.java b/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/CoordXValidator.java
deleted file mode 100644
--- a/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/CoordXValidator.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ /dev/null	(revision 56673c73dbad355574d745669586ac942d6f20ea)
@@ -1,20 +0,0 @@
-package ru.sikion.models.validators;
-
-/**
- * Coordinates validator. Checks if coordinates is not null.
- *
- * @author Sikion
- * @version 1.0
- */
-public class CoordXValidator implements Validator<Integer> {
-    /**
-     * Validates coordinates.
-     *
-     * @param value coordinates to validate
-     * @return true if coordinates is not null. Otherwise, false.
-     */
-    @Override
-    public boolean validate(Integer value) {
-        return value != null;
-    }
-}
Index: src/main/java/ru/sikion/commandManager/commands/MinByCreationDateCommand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.sikion.commandManager.commands;\r\n\r\nimport ru.sikion.models.Worker;\r\nimport ru.sikion.models.handlers.CollectionHandler;\r\nimport ru.sikion.models.handlers.WorkerHandler;\r\n\r\nimport java.util.Date;\r\nimport java.util.HashSet;\r\n\r\n/**\r\n * Returns element from collection with min creation date.\r\n *\r\n * @since 1.0\r\n * @author Sikion\r\n */\r\npublic class MinByCreationDateCommand implements BaseCommand{\r\n    @Override\r\n    public String getName() {\r\n        return \"min_by_creation_date\";\r\n    }\r\n\r\n    @Override\r\n    public String getDescr() {\r\n        return \"Returns element from collection with min creation date.\";\r\n    }\r\n\r\n    @Override\r\n    public void execute(String[] args) {\r\n        CollectionHandler<HashSet<Worker>, Worker> collectionHandler = WorkerHandler.getInstance();\r\n        Date min = collectionHandler.getCollection().stream().map(Worker::getCreationDate).min(Date::compareTo).orElse(null);\r\n\r\n        if (min == null)\r\n        {\r\n            System.out.println(\"There's nothing to show...\");\r\n        }\r\n        else\r\n        {\r\n            for (Worker obj : collectionHandler.getCollection()) {\r\n                if (obj.getCreationDate().equals(min))\r\n                    System.out.println(obj);\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/sikion/commandManager/commands/MinByCreationDateCommand.java b/src/main/java/ru/sikion/commandManager/commands/MinByCreationDateCommand.java
--- a/src/main/java/ru/sikion/commandManager/commands/MinByCreationDateCommand.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ b/src/main/java/ru/sikion/commandManager/commands/MinByCreationDateCommand.java	(date 1682571057521)
@@ -2,7 +2,7 @@
 
 import ru.sikion.models.Worker;
 import ru.sikion.models.handlers.CollectionHandler;
-import ru.sikion.models.handlers.WorkerHandler;
+import ru.sikion.models.handlers.WorkersHandler;
 
 import java.util.Date;
 import java.util.HashSet;
@@ -26,7 +26,7 @@
 
     @Override
     public void execute(String[] args) {
-        CollectionHandler<HashSet<Worker>, Worker> collectionHandler = WorkerHandler.getInstance();
+        CollectionHandler<HashSet<Worker>, Worker> collectionHandler = WorkersHandler.getInstance();
         Date min = collectionHandler.getCollection().stream().map(Worker::getCreationDate).min(Date::compareTo).orElse(null);
 
         if (min == null)
Index: src/main/java/ru/sikion/commandManager/commands/UpdateCommand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.sikion.commandManager.commands;\r\n\r\nimport ru.sikion.exceptions.BuildObjectException;\r\nimport ru.sikion.exceptions.WrongAmountOfArgumentsException;\r\nimport ru.sikion.main.Utilities;\r\nimport ru.sikion.models.Worker;\r\nimport ru.sikion.models.handlers.CollectionHandler;\r\nimport ru.sikion.models.handlers.ModuleHandler;\r\nimport ru.sikion.models.handlers.userMode.RouteCLIHandler;\r\nimport ru.sikion.models.handlers.WorkerHandler;\r\n\r\nimport java.util.HashSet;\r\nimport java.util.Objects;\r\n\r\n/**\r\n * Updates element by its ID.\r\n *\r\n * @since 1.0\r\n * @author Sikion\r\n */\r\npublic class UpdateCommand implements BaseCommand {\r\n\r\n    ModuleHandler<Worker> handler;\r\n\r\n    /**\r\n     * Default constructor with handler from 1.0\r\n     */\r\n    public UpdateCommand()\r\n    {\r\n        handler = new RouteCLIHandler();\r\n    }\r\n\r\n    /**\r\n     * Provides choosing handler\r\n     *\r\n     * @since 1.1\r\n     * @param handler ModuleHandler for operating\r\n     */\r\n    public UpdateCommand(ModuleHandler<Worker> handler)\r\n    {\r\n        this.handler = handler;\r\n    }\r\n\r\n    @Override\r\n    public String getName() {\r\n        return \"update\";\r\n    }\r\n\r\n    @Override\r\n    public String getDescr() {\r\n        return \"Updates element by it's ID.\";\r\n    }\r\n\r\n    @Override\r\n    public String getArgs() {\r\n        return \"id {element}\";\r\n    }\r\n\r\n    @Override\r\n    public void execute(String[] args) throws BuildObjectException, WrongAmountOfArgumentsException {\r\n        Utilities.checkArgumentsOrThrow(args.length, 1);\r\n\r\n        CollectionHandler<HashSet<Worker>, Worker> collectionHandler = WorkerHandler.getInstance();\r\n\r\n        Long finalId = Utilities.handleUserInputID(args[1]);\r\n        if (finalId == null) return;\r\n\r\n        if(!collectionHandler.getCollection().removeIf(worker -> Objects.equals(worker.getId(), finalId)))\r\n        {\r\n            System.out.println(\"Element with that id doesn't exists.\");\r\n            return;\r\n        }\r\n        Worker newObj = handler.buildObject();\r\n\r\n        System.out.println(\"Updated ID value: \" + finalId);\r\n        newObj.setId(finalId);\r\n\r\n        collectionHandler.addElementToCollection(newObj);\r\n\r\n        System.out.println(\"Object updated!\");\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/sikion/commandManager/commands/UpdateCommand.java b/src/main/java/ru/sikion/commandManager/commands/UpdateCommand.java
--- a/src/main/java/ru/sikion/commandManager/commands/UpdateCommand.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ b/src/main/java/ru/sikion/commandManager/commands/UpdateCommand.java	(date 1682575847287)
@@ -6,8 +6,8 @@
 import ru.sikion.models.Worker;
 import ru.sikion.models.handlers.CollectionHandler;
 import ru.sikion.models.handlers.ModuleHandler;
-import ru.sikion.models.handlers.userMode.RouteCLIHandler;
-import ru.sikion.models.handlers.WorkerHandler;
+import ru.sikion.models.handlers.userMode.WorkerCLIHandler;
+import ru.sikion.models.handlers.WorkersHandler;
 
 import java.util.HashSet;
 import java.util.Objects;
@@ -27,7 +27,7 @@
      */
     public UpdateCommand()
     {
-        handler = new RouteCLIHandler();
+        handler = new WorkerCLIHandler();
     }
 
     /**
@@ -60,9 +60,9 @@
     public void execute(String[] args) throws BuildObjectException, WrongAmountOfArgumentsException {
         Utilities.checkArgumentsOrThrow(args.length, 1);
 
-        CollectionHandler<HashSet<Worker>, Worker> collectionHandler = WorkerHandler.getInstance();
+        CollectionHandler<HashSet<Worker>, Worker> collectionHandler = WorkersHandler.getInstance();
 
-        Long finalId = Utilities.handleUserInputID(args[1]);
+        Integer finalId = Utilities.handleUserInputID(args[1]);
         if (finalId == null) return;
 
         if(!collectionHandler.getCollection().removeIf(worker -> Objects.equals(worker.getId(), finalId)))
Index: src/main/java/ru/sikion/models/handlers/userMode/RouteCLIHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/sikion/models/handlers/userMode/RouteCLIHandler.java b/src/main/java/ru/sikion/models/handlers/userMode/WorkerCLIHandler.java
rename from src/main/java/ru/sikion/models/handlers/userMode/RouteCLIHandler.java
rename to src/main/java/ru/sikion/models/handlers/userMode/WorkerCLIHandler.java
--- a/src/main/java/ru/sikion/models/handlers/userMode/RouteCLIHandler.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ b/src/main/java/ru/sikion/models/handlers/userMode/WorkerCLIHandler.java	(date 1682571952548)
@@ -5,7 +5,6 @@
 import ru.sikion.main.Utilities;
 import ru.sikion.models.Worker;
 import ru.sikion.models.handlers.*;
-import ru.sikion.models.validators.DistanceValidator;
 import ru.sikion.models.validators.NameValidator;
 import ru.sikion.models.validators.Validator;
 
@@ -20,7 +19,7 @@
  * @since 1.0
  * @author Sikion
  */
-public class RouteCLIHandler implements ModuleHandler<Worker> {
+public class WorkerCLIHandler implements ModuleHandler<Worker> {
     /**
      * Method for create fully validated objects by CLI (userMode).
      *
@@ -38,7 +37,7 @@
             Scanner scanner = new Scanner(System.in);
 
             // id
-            result.setId(RouteHandlers.generateID());
+            result.setId(WorkerHandlers.generateID());
 
             // name
             Validator<String> nameValidator = new NameValidator();
@@ -66,10 +65,10 @@
             System.out.println("Starting \"from\" field setup... (Type: Location)");
             System.out.print("This field may be skipped to fill. Skip? [y/n] ");
             String answer = scanner.next();
-            if (!answer.equalsIgnoreCase("y")) {
-                LocationCLIHandler locationCLIHandler = new LocationCLIHandler();
-                result.setFrom(locationCLIHandler.buildObject());
-            }
+//            if (!answer.equalsIgnoreCase("y")) {
+//                LocationCLIHandler locationCLIHandler = new LocationCLIHandler();
+//                result.setFrom(locationCLIHandler.buildObject());
+//            }
             if (Utilities.hasNextLineOrThrow(scanner)) {
                 scanner.nextLine();
             }
@@ -78,38 +77,15 @@
             System.out.println("Starting \"to\" field setup... (Type: Location)");
             System.out.print("This field may be skipped to fill. Skip? [y/n] ");
             answer = scanner.next();
-            if (!answer.equalsIgnoreCase("y")) {
-                LocationCLIHandler locationCLIHandler = new LocationCLIHandler();
-                result.setTo(locationCLIHandler.buildObject());
-            }
+//            if (!answer.equalsIgnoreCase("y")) {
+//                LocationCLIHandler locationCLIHandler = new LocationCLIHandler();
+//                result.setTo(locationCLIHandler.buildObject());
+//            }
             if (Utilities.hasNextLineOrThrow(scanner)) {
                 scanner.nextLine();
             }
 
-            // distance
-            while (true) {
-                try {
-                    DistanceValidator validator = new DistanceValidator();
-                    System.out.println("Enter the value of distance (Type: int (default value: 0))");
-                    int value = 0;
-                    if (Utilities.hasNextLineOrThrow(scanner)) {
-                        String line = scanner.nextLine();
-                        if (!line.isEmpty())
-                            value = Integer.parseInt(line);
-                    }
-                    if (!validator.validate(value)) {
-                        System.out.println("Value violates restrictions for field! Try again.");
-                        System.out.println("Restrictions: Number should be grater than 1.");
-                        continue;
-                    }
-                    result.setDistance(value);
-                } catch (InputMismatchException | NumberFormatException e) {
-                    System.out.println("Wrong input! Try again.");
-                    System.out.println("You should enter a number in range [-2147483648; 2147483647], it shouldn't be decimal.");
-                    continue;
-                }
-                break;
-            }
+
 
             // creationDate
             Date creationDate = Date.from(Instant.now());
Index: src/main/java/ru/sikion/models/handlers/WorkerHandlers.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.sikion.models.handlers;\r\n\r\nimport ru.sikion.models.Worker;\r\nimport ru.sikion.models.validators.IdValidator;\r\nimport ru.sikion.models.validators.Validator;\r\n\r\nimport java.util.HashSet;\r\nimport java.util.concurrent.ThreadLocalRandom;\r\n\r\n/**\r\n * Utility class for handling Worker objects. Contains static methods.\r\n *\r\n * @since 1.1\r\n * @author Sikion\r\n */\r\npublic class WorkerHandlers {\r\n\r\n    /**\r\n     * Generates unique ID for Worker Object.\r\n     *\r\n     * @return value for ID field.\r\n     */\r\n    public static Long generateID()\r\n    {\r\n        CollectionHandler<HashSet<Worker>, Worker> handler = WorkerHandler.getInstance();\r\n        // id\r\n        Validator<Integer> idValidator = new IdValidator();\r\n        var lastObj = handler.getLastElement();\r\n        long lastId = 1L;\r\n        if (lastObj != null)\r\n        {\r\n            lastId = lastObj.getId() + 1;\r\n        }\r\n        while (!idValidator.validate(lastId))\r\n        {\r\n            lastId = ThreadLocalRandom.current().nextLong(1, Long.MAX_VALUE);\r\n        }\r\n        System.out.println(\"ID Field (auto-generated): \" + lastId);\r\n        return lastId;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/sikion/models/handlers/WorkerHandlers.java b/src/main/java/ru/sikion/models/handlers/WorkerHandlers.java
--- a/src/main/java/ru/sikion/models/handlers/WorkerHandlers.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ b/src/main/java/ru/sikion/models/handlers/WorkerHandlers.java	(date 1682571892455)
@@ -20,20 +20,20 @@
      *
      * @return value for ID field.
      */
-    public static Long generateID()
+    public static int generateID()
     {
-        CollectionHandler<HashSet<Worker>, Worker> handler = WorkerHandler.getInstance();
-        // id
+        CollectionHandler<HashSet<Worker>, Worker> handler = WorkersHandler.getInstance();
+
         Validator<Integer> idValidator = new IdValidator();
         var lastObj = handler.getLastElement();
-        long lastId = 1L;
+        int lastId = 1;
         if (lastObj != null)
         {
-            lastId = lastObj.getId() + 1;
+            lastId = Math.toIntExact(lastObj.getId() + 1);
         }
         while (!idValidator.validate(lastId))
         {
-            lastId = ThreadLocalRandom.current().nextLong(1, Long.MAX_VALUE);
+            lastId = Math.toIntExact(ThreadLocalRandom.current().nextInt(1, Integer.MAX_VALUE));
         }
         System.out.println("ID Field (auto-generated): " + lastId);
         return lastId;
Index: src/main/java/ru/sikion/main/Utilities.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.sikion.main;\r\n\r\nimport exceptions.StreamInterruptedException;\r\nimport exceptions.WrongAmountOfArgumentsException;\r\n\r\nimport java.util.Scanner;\r\n\r\npublic class Utilities {\r\n    public static boolean isNotNumeric(String str) {\r\n        return !str.matches(\"-?\\\\d+(\\\\.\\\\d+)?\");  //match a number with optional '-' and decimal.\r\n    }\r\n\r\n    public static Long handleUserInputID(String input) {\r\n        if (Utilities.isNotNumeric(input)) {\r\n            System.out.println(\"Provided argument id: \\\"\" + input + \"\\\" is not a number! Try again.\");\r\n            return null;\r\n        } else if (input.contains(\".\")) {\r\n            System.out.println(\"ID field cannot accept decimal values. Try again.\");\r\n            return null;\r\n        }\r\n\r\n        Long id = null;\r\n        try {\r\n            id = Long.valueOf(input);\r\n        } catch (NumberFormatException e) {\r\n            System.out.println(\"Provided argument: \\\"\" + input + \"\\\" is too large for ID field. Try again.\");\r\n        }\r\n        return id;\r\n    }\r\n\r\n    public static void checkArgumentsOrThrow(int provided, int expected) throws WrongAmountOfArgumentsException {\r\n        if (provided - 1 != expected)\r\n            throw new WrongAmountOfArgumentsException(\"Provided \" + (provided - 1) + \" arguments, expected \" + expected);\r\n    }\r\n\r\n    public static boolean hasNextLineOrThrow(Scanner scanner) throws StreamInterruptedException {\r\n        if (scanner.hasNextLine()) return true;\r\n        else throw new StreamInterruptedException(\"Поток ввода был преждевременно остановлен.\");\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/sikion/main/Utilities.java b/src/main/java/ru/sikion/main/Utilities.java
--- a/src/main/java/ru/sikion/main/Utilities.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ b/src/main/java/ru/sikion/main/Utilities.java	(date 1682575847279)
@@ -1,7 +1,7 @@
 package ru.sikion.main;
 
-import exceptions.StreamInterruptedException;
-import exceptions.WrongAmountOfArgumentsException;
+import ru.sikion.exceptions.StreamInterruptedException;
+import ru.sikion.exceptions.WrongAmountOfArgumentsException;
 
 import java.util.Scanner;
 
@@ -10,7 +10,7 @@
         return !str.matches("-?\\d+(\\.\\d+)?");  //match a number with optional '-' and decimal.
     }
 
-    public static Long handleUserInputID(String input) {
+    public static Integer handleUserInputID(String input) {
         if (Utilities.isNotNumeric(input)) {
             System.out.println("Provided argument id: \"" + input + "\" is not a number! Try again.");
             return null;
@@ -19,9 +19,9 @@
             return null;
         }
 
-        Long id = null;
+        int id = Integer.parseInt(null);
         try {
-            id = Long.valueOf(input);
+            id = Integer.parseInt(input);
         } catch (NumberFormatException e) {
             System.out.println("Provided argument: \"" + input + "\" is too large for ID field. Try again.");
         }
Index: src/main/java/ru/sikion/models/validators/WorkerValidator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.sikion.models.validators;\r\n\r\nimport ru.sikion.models.Coordinates;\r\nimport ru.sikion.models.Worker;\r\n\r\nimport java.util.Optional;\r\n\r\n/**\r\n * Implementation of validator for name field. (Worker)\r\n * *\r\n * * @since 1.1\r\n * * @author Sikion\r\n */\r\npublic class WorkerValidator implements Validator<Worker> {\r\n    @Override\r\n    public boolean validate(Worker worker) {\r\n        Validator<Integer> idValidate = (id) -> id != null && id > 0;\r\n\r\n        if (idValidate.validate(worker.getId()) && new NameValidator().validate(worker.getName())) {\r\n            new CoordXValidator().validate(Optional.of(worker).map(Worker::getCoordinates).map(Coordinates::getX).orElse(0d));\r\n        }\r\n        return false;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/sikion/models/validators/WorkerValidator.java b/src/main/java/ru/sikion/models/validators/WorkerValidator.java
--- a/src/main/java/ru/sikion/models/validators/WorkerValidator.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ b/src/main/java/ru/sikion/models/validators/WorkerValidator.java	(date 1682571292159)
@@ -16,9 +16,11 @@
     public boolean validate(Worker worker) {
         Validator<Integer> idValidate = (id) -> id != null && id > 0;
 
-        if (idValidate.validate(worker.getId()) && new NameValidator().validate(worker.getName())) {
-            new CoordXValidator().validate(Optional.of(worker).map(Worker::getCoordinates).map(Coordinates::getX).orElse(0d));
-        }
-        return false;
+        return idValidate.validate(Math.toIntExact(worker.getId())) &&
+                new NameValidator().validate(worker.getName()) &&
+                new SalaryValidator().validate(worker.getSalary()) &&
+                new StartDateValidator().validate(worker.getStartDate()) &&
+                new EndDateValidator().validate(worker.getEndDate()) &&
+                new StatusValidator().validate(worker.getStatus());
     }
 }
Index: src/main/java/ru/sikion/models/handlers/CollectionHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.sikion.models.handlers;\r\n\r\nimport java.util.AbstractCollection;\r\nimport java.util.Comparator;\r\nimport java.util.Date;\r\n\r\n/**\r\n * Base interface for handling Collection of Elements. You should implement it in your handler for correct command working.\r\n *\r\n * @param <T> Type of Collection\r\n * @param <E> Type of Elements\r\n *\r\n * @since 1.0\r\n * @author Sikion\r\n */\r\npublic interface CollectionHandler<T extends AbstractCollection<E>, E> {\r\n    /**\r\n     * Provides method for get collection.\r\n     *\r\n     * @return Actual collection reference\r\n     */\r\n    T getCollection();\r\n\r\n    /**\r\n     * Provides method for set collection.\r\n     *\r\n     * @param value Collection\r\n     */\r\n    void setCollection(T value);\r\n\r\n    /**\r\n     * Provides method for fast adding element in collection.\r\n     *\r\n     * @param value Element to add\r\n     */\r\n    void addElementToCollection(E value);\r\n\r\n    /**\r\n     * Provides method for fast clear element in collection.\r\n     */\r\n    void clearCollection();\r\n\r\n    /**\r\n     * Provides method for fast sorting collection. You can ignore this method.\r\n     */\r\n    void sort();\r\n\r\n    /**\r\n     * Provides method for fast getting first element.\r\n     *\r\n     * @return First element. If collection was empty, creates new Element and returns it.\r\n     */\r\n    E getFirstOrNew();\r\n\r\n    /**\r\n     * Provides method for get collection initDate.\r\n     *\r\n     * @return Date instance -- Collection created time.\r\n     */\r\n    Date getInitDate();\r\n\r\n    /**\r\n     * Provides method for getting last element.\r\n     *\r\n     * @return Last element. If collection was empty, returns null.\r\n     */\r\n    E getLastElement();\r\n\r\n    /**\r\n     * Provides method for validate elements in collection. You can ignore this method\r\n     */\r\n    void validateElements();\r\n\r\n    /**\r\n     * Gets min element by given comparator\r\n     *\r\n     * @param comparator Comparator to compare.\r\n     * @return Min element or null if collection is empty\r\n     */\r\n    E getMin(Comparator<E> comparator);\r\n\r\n    /**\r\n     * Gets max element by given comparator\r\n     *\r\n     * @param comparator Comparator to compare.\r\n     * @return Max element or null if collection is empty\r\n     */\r\n    E getMax(Comparator<E> comparator);\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/sikion/models/handlers/CollectionHandler.java b/src/main/java/ru/sikion/models/handlers/CollectionHandler.java
--- a/src/main/java/ru/sikion/models/handlers/CollectionHandler.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ b/src/main/java/ru/sikion/models/handlers/CollectionHandler.java	(date 1682569160478)
@@ -71,19 +71,4 @@
      */
     void validateElements();
 
-    /**
-     * Gets min element by given comparator
-     *
-     * @param comparator Comparator to compare.
-     * @return Min element or null if collection is empty
-     */
-    E getMin(Comparator<E> comparator);
-
-    /**
-     * Gets max element by given comparator
-     *
-     * @param comparator Comparator to compare.
-     * @return Max element or null if collection is empty
-     */
-    E getMax(Comparator<E> comparator);
 }
\ No newline at end of file
Index: src/main/java/ru/sikion/commandManager/CommandManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.sikion.commandManager;\r\n\r\nimport ru.sikion.commandManager.commands.*;\r\nimport ru.sikion.exceptions.BuildObjectException;\r\nimport ru.sikion.exceptions.CommandInterruptedException;\r\nimport ru.sikion.exceptions.UnknownCommandException;\r\nimport ru.sikion.exceptions.WrongAmountOfArgumentsException;\r\nimport ru.sikion.models.Worker;\r\nimport ru.sikion.models.handlers.ModuleHandler;\r\nimport ru.sikion.models.handlers.nonUserMode.RouteNonCLIHandler;\r\nimport ru.sikion.models.handlers.userMode.RouteCLIHandler;\r\n\r\nimport java.util.LinkedHashMap;\r\nimport java.util.Optional;\r\nimport java.util.Scanner;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\n\r\n/**\r\n * Command Manager for interactive collection manage. For execute commands, use CommandExecutor class\r\n *\r\n * @see CommandExecutor\r\n * @since 1.0\r\n * @author Sikion\r\n */\r\npublic class CommandManager {\r\n\r\n    private static final Logger myLogger = Logger.getLogger(\"com.github.Sikion.lab5\");\r\n    LinkedHashMap<String, BaseCommand> commands;\r\n\r\n    /**\r\n     * Setup command manager and all of its commands.\r\n     */\r\n    public CommandManager()\r\n    {\r\n        commands = new LinkedHashMap<>();\r\n\r\n        commands.put(\"help\", new HelpCommand());\r\n        commands.put(\"info\", new InfoCommand());\r\n        commands.put(\"show\", new ShowCommand());\r\n        commands.put(\"add\", new AddCommand());\r\n        commands.put(\"update\", new UpdateCommand());\r\n        commands.put(\"remove_by_id\", new RemoveByIdCommand());\r\n        commands.put(\"clear\", new ClearCommand());\r\n        commands.put(\"save\", new SaveCommand());\r\n        commands.put(\"execute_script\", new ExecuteScriptCommand());\r\n        commands.put(\"exit\", new ExitCommand());\r\n        commands.put(\"add_if_max\", new AddIfMaxCommand());\r\n        commands.put(\"add_if_min\", new AddIfMinCommand());\r\n        commands.put(\"remove_greater\", new RemoveGreaterCommand());\r\n        commands.put(\"min_by_creation_date\", new MinByCreationDateCommand());\r\n        commands.put(\"count_greater_than_distance\", new CountGreaterThanDistanceCommand());\r\n        commands.put(\"print_field_ascending_distance\", new PrintFieldDistanceAscendingCommand());\r\n    }\r\n\r\n    /**\r\n     * Constructor provides choice of commands behavior: ex. userMode or nonUserMode\r\n     *\r\n     * @since 1.1\r\n     * @see CommandMode\r\n     * @param mode Mode for CommandHandler\r\n     * @param scanner Commands scanner\r\n     */\r\n    public CommandManager(CommandMode mode, Scanner scanner) {\r\n        commands = new LinkedHashMap<>();\r\n        \r\n        commands.put(\"help\", new HelpCommand());\r\n        commands.put(\"info\", new InfoCommand());\r\n        commands.put(\"show\", new ShowCommand());\r\n        commands.put(\"remove_by_id\", new RemoveByIdCommand());\r\n        commands.put(\"clear\", new ClearCommand());\r\n        commands.put(\"save\", new SaveCommand());\r\n        commands.put(\"execute_script\", new ExecuteScriptCommand());\r\n        commands.put(\"exit\", new ExitCommand());\r\n        commands.put(\"min_by_creation_date\", new MinByCreationDateCommand());\r\n        commands.put(\"count_greater_than_distance\", new CountGreaterThanDistanceCommand());\r\n        commands.put(\"print_field_ascending_distance\", new PrintFieldDistanceAscendingCommand());\r\n\r\n        ModuleHandler<Worker> handler = null;\r\n        switch (mode)\r\n        {\r\n            case CLI_UserMode -> handler = new RouteCLIHandler();\r\n            case NonUserMode -> handler = new RouteNonCLIHandler(scanner);\r\n        }\r\n\r\n        commands.put(\"add\", new AddCommand(handler));\r\n        commands.put(\"update\", new UpdateCommand(handler));\r\n        commands.put(\"add_if_max\", new AddIfMaxCommand(handler));\r\n        commands.put(\"add_if_min\", new AddIfMinCommand(handler));\r\n        commands.put(\"remove_greater\", new RemoveGreaterCommand(handler));\r\n    }\r\n\r\n    /**\r\n     * Get all commands from manager.\r\n     *\r\n     * @return Map of loaded commands\r\n     */\r\n    public LinkedHashMap<String, BaseCommand> getCommands() {\r\n        return commands;\r\n    }\r\n\r\n    /**\r\n     * Universe method for command executing.\r\n     *\r\n     * @param args full separated line from stream\r\n     */\r\n    public void executeCommand(String[] args) {\r\n        try {\r\n            Optional.ofNullable(commands.get(args[0])).orElseThrow(() -> new UnknownCommandException(\"Указанная команда не была обнаружена\")).execute(args);\r\n        } catch (IllegalArgumentException | NullPointerException e) {\r\n            myLogger.log(Level.SEVERE, \"Выполнение команды пропущено из-за неправильных предоставленных аргументов! (\" + e.getMessage() + \")\");\r\n            throw new CommandInterruptedException(e);\r\n        } catch (BuildObjectException | UnknownCommandException e) {\r\n            myLogger.log(Level.SEVERE, e.getMessage());\r\n            throw new CommandInterruptedException(e);\r\n        } catch (WrongAmountOfArgumentsException e) {\r\n            myLogger.log(Level.SEVERE, \"Wrong amount of arguments! \" + e.getMessage());\r\n            throw new CommandInterruptedException(e);\r\n        } catch (Exception e) {\r\n            myLogger.log(Level.SEVERE, \"В командном менеджере произошла непредвиденная ошибка! \" + e.getMessage());\r\n            throw new CommandInterruptedException(e);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/sikion/commandManager/CommandManager.java b/src/main/java/ru/sikion/commandManager/CommandManager.java
--- a/src/main/java/ru/sikion/commandManager/CommandManager.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ b/src/main/java/ru/sikion/commandManager/CommandManager.java	(date 1682571804463)
@@ -8,7 +8,7 @@
 import ru.sikion.models.Worker;
 import ru.sikion.models.handlers.ModuleHandler;
 import ru.sikion.models.handlers.nonUserMode.RouteNonCLIHandler;
-import ru.sikion.models.handlers.userMode.RouteCLIHandler;
+import ru.sikion.models.handlers.userMode.WorkerCLIHandler;
 
 import java.util.LinkedHashMap;
 import java.util.Optional;
@@ -45,12 +45,7 @@
         commands.put("save", new SaveCommand());
         commands.put("execute_script", new ExecuteScriptCommand());
         commands.put("exit", new ExitCommand());
-        commands.put("add_if_max", new AddIfMaxCommand());
-        commands.put("add_if_min", new AddIfMinCommand());
-        commands.put("remove_greater", new RemoveGreaterCommand());
         commands.put("min_by_creation_date", new MinByCreationDateCommand());
-        commands.put("count_greater_than_distance", new CountGreaterThanDistanceCommand());
-        commands.put("print_field_ascending_distance", new PrintFieldDistanceAscendingCommand());
     }
 
     /**
@@ -73,21 +68,16 @@
         commands.put("execute_script", new ExecuteScriptCommand());
         commands.put("exit", new ExitCommand());
         commands.put("min_by_creation_date", new MinByCreationDateCommand());
-        commands.put("count_greater_than_distance", new CountGreaterThanDistanceCommand());
-        commands.put("print_field_ascending_distance", new PrintFieldDistanceAscendingCommand());
 
         ModuleHandler<Worker> handler = null;
         switch (mode)
         {
-            case CLI_UserMode -> handler = new RouteCLIHandler();
+            case CLI_UserMode -> handler = new WorkerCLIHandler();
             case NonUserMode -> handler = new RouteNonCLIHandler(scanner);
         }
 
         commands.put("add", new AddCommand(handler));
         commands.put("update", new UpdateCommand(handler));
-        commands.put("add_if_max", new AddIfMaxCommand(handler));
-        commands.put("add_if_min", new AddIfMinCommand(handler));
-        commands.put("remove_greater", new RemoveGreaterCommand(handler));
     }
 
     /**
Index: src/main/java/ru/sikion/models/validators/IdValidator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.sikion.models.validators;\r\n\r\nimport ru.sikion.models.Worker;\r\nimport ru.sikion.models.handlers.CollectionHandler;\r\nimport ru.sikion.models.handlers.WorkerHandler;\r\n\r\nimport java.util.TreeMap;\r\nimport java.util.TreeSet;\r\n\r\n/**\r\n * Implementation of validator for ID field. (Worker)\r\n *\r\n * @author Sikion\r\n * @since 1.0\r\n */\r\npublic class IdValidator implements Validator<Integer> {\r\n\r\n    TreeSet<Integer> ids;\r\n\r\n\r\n    /**\r\n     * Setup validator default constructor\r\n     */\r\n    public IdValidator() {\r\n        ids = new TreeSet<>();\r\n\r\n        CollectionHandler<TreeMap<Object>, Worker> handler = WorkerHandler.getInstance();\r\n\r\n        handler.getCollection().forEach((value) -> ids.add(value.getId()));\r\n    }\r\n\r\n    /**\r\n     * Checks if value unique in collection, greater than 0 and notnull.\r\n     *\r\n     * @param value ID to validate\r\n     * @return true/false -- matches the restrictions\r\n     * @see Worker\r\n     */\r\n\r\n    @Override\r\n    public boolean validate(Integer value) {\r\n        if (value == null) return false;\r\n        if (value <= 0) return false;\r\n        return ids.add(value);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/sikion/models/validators/IdValidator.java b/src/main/java/ru/sikion/models/validators/IdValidator.java
--- a/src/main/java/ru/sikion/models/validators/IdValidator.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ b/src/main/java/ru/sikion/models/validators/IdValidator.java	(date 1682571000493)
@@ -2,9 +2,9 @@
 
 import ru.sikion.models.Worker;
 import ru.sikion.models.handlers.CollectionHandler;
-import ru.sikion.models.handlers.WorkerHandler;
+import ru.sikion.models.handlers.WorkersHandler;
 
-import java.util.TreeMap;
+import java.util.HashSet;
 import java.util.TreeSet;
 
 /**
@@ -24,9 +24,9 @@
     public IdValidator() {
         ids = new TreeSet<>();
 
-        CollectionHandler<TreeMap<Object>, Worker> handler = WorkerHandler.getInstance();
+        CollectionHandler<HashSet<Worker>, Worker> handler = WorkersHandler.getInstance();
 
-        handler.getCollection().forEach((value) -> ids.add(value.getId()));
+        handler.getCollection().forEach((value) -> ids.add(Math.toIntExact(value.getId())));
     }
 
     /**
Index: src/main/java/ru/sikion/commandManager/commands/SaveCommand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.sikion.commandManager.commands;\r\n\r\nimport ru.sikion.exceptions.WrongAmountOfArgumentsException;\r\nimport ru.sikion.fileLogic.Saver;\r\nimport ru.sikion.models.Worker;\r\nimport ru.sikion.models.handlers.CollectionHandler;\r\nimport ru.sikion.models.handlers.WorkerHandler;\r\n\r\nimport java.util.HashSet;\r\n\r\n/**\r\n * Saves collection to file.\r\n *\r\n * @since 1.0\r\n * @author Sikion\r\n */\r\npublic class SaveCommand implements BaseCommand {\r\n    @Override\r\n    public String getName() {\r\n        return \"save\";\r\n    }\r\n\r\n    @Override\r\n    public String getDescr() {\r\n        return \"Saves collection to file.\";\r\n    }\r\n\r\n    @Override\r\n    public void execute(String[] args) throws WrongAmountOfArgumentsException {\r\n        System.out.println(\"Saving...\");\r\n        CollectionHandler<HashSet<Worker>, Worker> collectionHandler = WorkerHandler.getInstance();\r\n        Saver<HashSet<Worker>, Worker> saver = new Saver<>(Worker.class);\r\n\r\n        saver.saveCollection(collectionHandler.getCollection(), \"lab5\");\r\n\r\n        System.out.println(\"Executed.\");\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/sikion/commandManager/commands/SaveCommand.java b/src/main/java/ru/sikion/commandManager/commands/SaveCommand.java
--- a/src/main/java/ru/sikion/commandManager/commands/SaveCommand.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ b/src/main/java/ru/sikion/commandManager/commands/SaveCommand.java	(date 1682571085765)
@@ -4,7 +4,7 @@
 import ru.sikion.fileLogic.Saver;
 import ru.sikion.models.Worker;
 import ru.sikion.models.handlers.CollectionHandler;
-import ru.sikion.models.handlers.WorkerHandler;
+import ru.sikion.models.handlers.WorkersHandler;
 
 import java.util.HashSet;
 
@@ -28,7 +28,7 @@
     @Override
     public void execute(String[] args) throws WrongAmountOfArgumentsException {
         System.out.println("Saving...");
-        CollectionHandler<HashSet<Worker>, Worker> collectionHandler = WorkerHandler.getInstance();
+        CollectionHandler<HashSet<Worker>, Worker> collectionHandler = WorkersHandler.getInstance();
         Saver<HashSet<Worker>, Worker> saver = new Saver<>(Worker.class);
 
         saver.saveCollection(collectionHandler.getCollection(), "lab5");
Index: src/main/java/ru/sikion/models/handlers/userMode/CoordinatesCLIHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.sikion.models.handlers.userMode;\r\n\r\nimport ru.sikion.exceptions.BuildObjectException;\r\nimport ru.sikion.exceptions.StreamInterruptedException;\r\nimport ru.sikion.main.Utilities;\r\nimport ru.sikion.models.Coordinates;\r\nimport ru.sikion.models.handlers.ModuleHandler;\r\nimport ru.sikion.models.validators.CoordXValidator;\r\nimport ru.sikion.models.validators.CoordYValidator;\r\n\r\nimport java.util.InputMismatchException;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * Implementation of ModuleHandler for Coordinates Model.\r\n *\r\n * @since 1.0\r\n * @author Sikion\r\n */\r\npublic class CoordinatesCLIHandler implements ModuleHandler<Coordinates> {\r\n\r\n    /**\r\n     * Method for create fully validated objects by CLI.\r\n     *\r\n     * @return Built object\r\n     */\r\n    @Override\r\n    public Coordinates buildObject() throws BuildObjectException {\r\n        try {\r\n            System.out.println(\"Generating object...\");\r\n            Coordinates result = new Coordinates();\r\n            System.out.println(\"Welcome to master of Coordinates object creation!\");\r\n            System.out.println(\"Follow the instructions to setup your object.\");\r\n            System.out.println();\r\n\r\n            Scanner scanner = new Scanner(System.in);\r\n\r\n            while (true) {\r\n                try {\r\n                    CoordXValidator xValidator = new CoordXValidator();\r\n                    System.out.println(\"Enter the value of x (Type: double (default value: 0.0d))\");\r\n                    double value = 0;\r\n                    if (Utilities.hasNextLineOrThrow(scanner)) {\r\n                        String line = scanner.nextLine();\r\n                        if (!line.isEmpty())\r\n                            value = Double.parseDouble(line);\r\n                    }\r\n                    if (xValidator.validate(value))\r\n                        result.setX(value);\r\n                    else {\r\n                        System.out.println(\"Value violates restrictions for field! Try again.\");\r\n                        System.out.println(\"Restrictions: IEEE 751 Double value. Should be greater than -107.\");\r\n                        continue;\r\n                    }\r\n                } catch (InputMismatchException | NumberFormatException e) {\r\n                    System.out.println(\"Wrong input! Try again.\");\r\n                    System.out.println(\"You should enter a positive real number, matches with IEEE 754 Double value standard (not so big/small).\");\r\n                    continue;\r\n                }\r\n                break;\r\n            }\r\n\r\n            while (true) {\r\n                try {\r\n                    CoordYValidator yValidator = new CoordYValidator();\r\n                    System.out.println(\"Enter the value of y (Type: Float)\");\r\n                    Float value = null;\r\n                    if (Utilities.hasNextLineOrThrow(scanner)) {\r\n                        String line = scanner.nextLine();\r\n                        if (!line.isEmpty())\r\n                            value = Float.valueOf(line);\r\n                    }\r\n                    if (yValidator.validate(value))\r\n                        result.setY(value);\r\n                    else {\r\n                        System.out.println(\"Value violates restrictions for field! Try again.\");\r\n                        System.out.println(\"Restrictions: IEEE 754 Float number. Not null and should be greater than -39.\");\r\n                        continue;\r\n                    }\r\n                } catch (InputMismatchException | NumberFormatException e) {\r\n                    System.out.println(\"Wrong input! Try again.\");\r\n                    System.out.println(\"You should enter a real number, matches with IEEE 754 Float value standard (not so big/small).\");\r\n                    continue;\r\n                }\r\n                break;\r\n            }\r\n\r\n            System.out.println(\"Object setup completed! Sending result...\");\r\n\r\n            return result;\r\n        } catch (StreamInterruptedException e) {\r\n            throw new BuildObjectException(\"Во время конструирования объекта произошла ошибка: \" + e.getMessage());\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/sikion/models/handlers/userMode/CoordinatesCLIHandler.java b/src/main/java/ru/sikion/models/handlers/userMode/CoordinatesCLIHandler.java
--- a/src/main/java/ru/sikion/models/handlers/userMode/CoordinatesCLIHandler.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ b/src/main/java/ru/sikion/models/handlers/userMode/CoordinatesCLIHandler.java	(date 1682571624087)
@@ -39,11 +39,11 @@
                 try {
                     CoordXValidator xValidator = new CoordXValidator();
                     System.out.println("Enter the value of x (Type: double (default value: 0.0d))");
-                    double value = 0;
+                    int value = 0;
                     if (Utilities.hasNextLineOrThrow(scanner)) {
                         String line = scanner.nextLine();
                         if (!line.isEmpty())
-                            value = Double.parseDouble(line);
+                            value = Integer.parseInt(line);
                     }
                     if (xValidator.validate(value))
                         result.setX(value);
Index: src/main/java/ru/sikion/models/handlers/userMode/LocationCLIHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.sikion.models.handlers.userMode;\r\n\r\nimport ru.sikion.exceptions.BuildObjectException;\r\nimport ru.sikion.exceptions.StreamInterruptedException;\r\nimport ru.sikion.main.Utilities;\r\nimport ru.sikion.models.handlers.ModuleHandler;\r\nimport ru.sikion.models.validators.LocationNameValidator;\r\nimport ru.sikion.models.validators.LocationXValidator;\r\nimport ru.sikion.models.validators.LocationYZValidator;\r\nimport ru.sikion.models.validators.Validator;\r\n\r\nimport java.util.InputMismatchException;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * Implementation of ModuleHandler for Location Model.\r\n *\r\n * @since 1.0\r\n * @author Sikion\r\n */\r\npublic class LocationCLIHandler implements ModuleHandler<Location> {\r\n    /**\r\n     * Method for create fully validated objects by CLI.\r\n     *\r\n     * @return Built object\r\n     */\r\n    @Override\r\n    public Location buildObject() throws BuildObjectException {\r\n        try {\r\n            System.out.println(\"Generating object...\");\r\n            Location result = new Location();\r\n            System.out.println(\"Welcome to master of Location object creation!\");\r\n            System.out.println(\"Follow the instructions to setup your object.\");\r\n            System.out.println();\r\n\r\n            Scanner scanner = new Scanner(System.in);\r\n\r\n            Validator<Float> locationXValidator = new LocationXValidator();\r\n\r\n            while (true) {\r\n                try {\r\n                    System.out.println(\"Enter the value of x (Type: float (default value: 0.0f))\");\r\n                    float value = 0;\r\n                    if (Utilities.hasNextLineOrThrow(scanner)) {\r\n                        String line = scanner.nextLine();\r\n                        if (!line.isEmpty())\r\n                            value = Float.parseFloat(line);\r\n                    }\r\n                    if (!locationXValidator.validate(value)) {\r\n                        System.out.println(\"Value violates restrictions for field! Try again.\");\r\n                        System.out.println(\"Restrictions: IEEE 754 Float value.\");\r\n                        continue;\r\n                    }\r\n                    result.setX(value);\r\n                } catch (InputMismatchException | NumberFormatException e) {\r\n                    System.out.println(\"Wrong input! Try again.\");\r\n                    System.out.println(\"You should enter a real number, matches with IEEE 754 Float value standard (not so big/small).\");\r\n                    continue;\r\n                }\r\n                break;\r\n            }\r\n\r\n            LocationYZValidator yzValidator = new LocationYZValidator();\r\n\r\n\r\n            String yInvitation = \"Enter the value of y (Type: Long)\";\r\n            result.setY(handleYZInput(scanner, yzValidator, yInvitation));\r\n\r\n            String zInvitation = \"Enter the value of z (Type: Long)\";\r\n            result.setZ(handleYZInput(scanner, yzValidator, zInvitation));\r\n\r\n            while (true) {\r\n                LocationNameValidator nameValidator = new LocationNameValidator();\r\n                System.out.println(\"Enter the value of name (Type: String)\");\r\n                System.out.println(\"This field may be skipped to fill\");\r\n                String value = null;\r\n                if (Utilities.hasNextLineOrThrow(scanner)) {\r\n                    String line = scanner.nextLine();\r\n                    if (!line.isEmpty())\r\n                        value = line;\r\n                }\r\n                if (!nameValidator.validate(value)) {\r\n                    System.out.println(\"Value violates restrictions for field! Try again.\");\r\n                    System.out.println(\"Restrictions: Should be not empty.\");\r\n                    continue;\r\n                }\r\n                result.setName(value);\r\n                break;\r\n            }\r\n\r\n            System.out.println(\"Object setup completed! Sending result...\");\r\n\r\n            return result;\r\n        } catch (StreamInterruptedException e) {\r\n            throw new BuildObjectException(\"Во время конструирования объекта произошла ошибка: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    private Long handleYZInput(Scanner scanner, Validator<Long> yzValidator, String invitation) throws StreamInterruptedException {\r\n        Long value = null;\r\n        while (true) {\r\n            try {\r\n                System.out.println(invitation);\r\n                if (Utilities.hasNextLineOrThrow(scanner)) {\r\n                    String line = scanner.nextLine();\r\n                    if (!line.isEmpty())\r\n                        value = Long.valueOf(line);\r\n                }\r\n                if (!yzValidator.validate(value)) {\r\n                    System.out.println(\"Value violates restrictions for field! Try again.\");\r\n                    System.out.println(\"Restrictions: Number should be in range [-9223372036854775808; 9223372036854775807] and not null.\");\r\n                    continue;\r\n                }\r\n            } catch (InputMismatchException | NumberFormatException e) {\r\n                System.out.println(\"Wrong input! Try again.\");\r\n                System.out.println(\"You should enter a number in range [-9223372036854775808; 9223372036854775807], it shouldn't be decimal.\");\r\n                continue;\r\n            }\r\n            break;\r\n        }\r\n        return value;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/sikion/models/handlers/userMode/LocationCLIHandler.java b/src/main/java/ru/sikion/models/handlers/userMode/LocationCLIHandler.java
--- a/src/main/java/ru/sikion/models/handlers/userMode/LocationCLIHandler.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ b/src/main/java/ru/sikion/models/handlers/userMode/LocationCLIHandler.java	(date 1682571624097)
@@ -1,123 +1,123 @@
-package ru.sikion.models.handlers.userMode;
-
-import ru.sikion.exceptions.BuildObjectException;
-import ru.sikion.exceptions.StreamInterruptedException;
-import ru.sikion.main.Utilities;
-import ru.sikion.models.handlers.ModuleHandler;
-import ru.sikion.models.validators.LocationNameValidator;
-import ru.sikion.models.validators.LocationXValidator;
-import ru.sikion.models.validators.LocationYZValidator;
-import ru.sikion.models.validators.Validator;
-
-import java.util.InputMismatchException;
-import java.util.Scanner;
-
-/**
- * Implementation of ModuleHandler for Location Model.
- *
- * @since 1.0
- * @author Sikion
- */
-public class LocationCLIHandler implements ModuleHandler<Location> {
-    /**
-     * Method for create fully validated objects by CLI.
-     *
-     * @return Built object
-     */
-    @Override
-    public Location buildObject() throws BuildObjectException {
-        try {
-            System.out.println("Generating object...");
-            Location result = new Location();
-            System.out.println("Welcome to master of Location object creation!");
-            System.out.println("Follow the instructions to setup your object.");
-            System.out.println();
-
-            Scanner scanner = new Scanner(System.in);
-
-            Validator<Float> locationXValidator = new LocationXValidator();
-
-            while (true) {
-                try {
-                    System.out.println("Enter the value of x (Type: float (default value: 0.0f))");
-                    float value = 0;
-                    if (Utilities.hasNextLineOrThrow(scanner)) {
-                        String line = scanner.nextLine();
-                        if (!line.isEmpty())
-                            value = Float.parseFloat(line);
-                    }
-                    if (!locationXValidator.validate(value)) {
-                        System.out.println("Value violates restrictions for field! Try again.");
-                        System.out.println("Restrictions: IEEE 754 Float value.");
-                        continue;
-                    }
-                    result.setX(value);
-                } catch (InputMismatchException | NumberFormatException e) {
-                    System.out.println("Wrong input! Try again.");
-                    System.out.println("You should enter a real number, matches with IEEE 754 Float value standard (not so big/small).");
-                    continue;
-                }
-                break;
-            }
-
-            LocationYZValidator yzValidator = new LocationYZValidator();
-
-
-            String yInvitation = "Enter the value of y (Type: Long)";
-            result.setY(handleYZInput(scanner, yzValidator, yInvitation));
-
-            String zInvitation = "Enter the value of z (Type: Long)";
-            result.setZ(handleYZInput(scanner, yzValidator, zInvitation));
-
-            while (true) {
-                LocationNameValidator nameValidator = new LocationNameValidator();
-                System.out.println("Enter the value of name (Type: String)");
-                System.out.println("This field may be skipped to fill");
-                String value = null;
-                if (Utilities.hasNextLineOrThrow(scanner)) {
-                    String line = scanner.nextLine();
-                    if (!line.isEmpty())
-                        value = line;
-                }
-                if (!nameValidator.validate(value)) {
-                    System.out.println("Value violates restrictions for field! Try again.");
-                    System.out.println("Restrictions: Should be not empty.");
-                    continue;
-                }
-                result.setName(value);
-                break;
-            }
-
-            System.out.println("Object setup completed! Sending result...");
-
-            return result;
-        } catch (StreamInterruptedException e) {
-            throw new BuildObjectException("Во время конструирования объекта произошла ошибка: " + e.getMessage());
-        }
-    }
-
-    private Long handleYZInput(Scanner scanner, Validator<Long> yzValidator, String invitation) throws StreamInterruptedException {
-        Long value = null;
-        while (true) {
-            try {
-                System.out.println(invitation);
-                if (Utilities.hasNextLineOrThrow(scanner)) {
-                    String line = scanner.nextLine();
-                    if (!line.isEmpty())
-                        value = Long.valueOf(line);
-                }
-                if (!yzValidator.validate(value)) {
-                    System.out.println("Value violates restrictions for field! Try again.");
-                    System.out.println("Restrictions: Number should be in range [-9223372036854775808; 9223372036854775807] and not null.");
-                    continue;
-                }
-            } catch (InputMismatchException | NumberFormatException e) {
-                System.out.println("Wrong input! Try again.");
-                System.out.println("You should enter a number in range [-9223372036854775808; 9223372036854775807], it shouldn't be decimal.");
-                continue;
-            }
-            break;
-        }
-        return value;
-    }
-}
+//package ru.sikion.models.handlers.userMode;
+//
+//import ru.sikion.exceptions.BuildObjectException;
+//import ru.sikion.exceptions.StreamInterruptedException;
+//import ru.sikion.main.Utilities;
+//import ru.sikion.models.handlers.ModuleHandler;
+//import ru.sikion.models.validators.LocationNameValidator;
+//import ru.sikion.models.validators.LocationXValidator;
+//import ru.sikion.models.validators.LocationYZValidator;
+//import ru.sikion.models.validators.Validator;
+//
+//import java.util.InputMismatchException;
+//import java.util.Scanner;
+//
+///**
+// * Implementation of ModuleHandler for Location Model.
+// *
+// * @since 1.0
+// * @author Sikion
+// */
+//public class LocationCLIHandler implements ModuleHandler<Location> {
+//    /**
+//     * Method for create fully validated objects by CLI.
+//     *
+//     * @return Built object
+//     */
+//    @Override
+//    public Location buildObject() throws BuildObjectException {
+//        try {
+//            System.out.println("Generating object...");
+//            Location result = new Location();
+//            System.out.println("Welcome to master of Location object creation!");
+//            System.out.println("Follow the instructions to setup your object.");
+//            System.out.println();
+//
+//            Scanner scanner = new Scanner(System.in);
+//
+//            Validator<Float> locationXValidator = new LocationXValidator();
+//
+//            while (true) {
+//                try {
+//                    System.out.println("Enter the value of x (Type: float (default value: 0.0f))");
+//                    float value = 0;
+//                    if (Utilities.hasNextLineOrThrow(scanner)) {
+//                        String line = scanner.nextLine();
+//                        if (!line.isEmpty())
+//                            value = Float.parseFloat(line);
+//                    }
+//                    if (!locationXValidator.validate(value)) {
+//                        System.out.println("Value violates restrictions for field! Try again.");
+//                        System.out.println("Restrictions: IEEE 754 Float value.");
+//                        continue;
+//                    }
+//                    result.setX(value);
+//                } catch (InputMismatchException | NumberFormatException e) {
+//                    System.out.println("Wrong input! Try again.");
+//                    System.out.println("You should enter a real number, matches with IEEE 754 Float value standard (not so big/small).");
+//                    continue;
+//                }
+//                break;
+//            }
+//
+//            LocationYZValidator yzValidator = new LocationYZValidator();
+//
+//
+//            String yInvitation = "Enter the value of y (Type: Long)";
+//            result.setY(handleYZInput(scanner, yzValidator, yInvitation));
+//
+//            String zInvitation = "Enter the value of z (Type: Long)";
+//            result.setZ(handleYZInput(scanner, yzValidator, zInvitation));
+//
+//            while (true) {
+//                LocationNameValidator nameValidator = new LocationNameValidator();
+//                System.out.println("Enter the value of name (Type: String)");
+//                System.out.println("This field may be skipped to fill");
+//                String value = null;
+//                if (Utilities.hasNextLineOrThrow(scanner)) {
+//                    String line = scanner.nextLine();
+//                    if (!line.isEmpty())
+//                        value = line;
+//                }
+//                if (!nameValidator.validate(value)) {
+//                    System.out.println("Value violates restrictions for field! Try again.");
+//                    System.out.println("Restrictions: Should be not empty.");
+//                    continue;
+//                }
+//                result.setName(value);
+//                break;
+//            }
+//
+//            System.out.println("Object setup completed! Sending result...");
+//
+//            return result;
+//        } catch (StreamInterruptedException e) {
+//            throw new BuildObjectException("Во время конструирования объекта произошла ошибка: " + e.getMessage());
+//        }
+//    }
+//
+//    private Long handleYZInput(Scanner scanner, Validator<Long> yzValidator, String invitation) throws StreamInterruptedException {
+//        Long value = null;
+//        while (true) {
+//            try {
+//                System.out.println(invitation);
+//                if (Utilities.hasNextLineOrThrow(scanner)) {
+//                    String line = scanner.nextLine();
+//                    if (!line.isEmpty())
+//                        value = Long.valueOf(line);
+//                }
+//                if (!yzValidator.validate(value)) {
+//                    System.out.println("Value violates restrictions for field! Try again.");
+//                    System.out.println("Restrictions: Number should be in range [-9223372036854775808; 9223372036854775807] and not null.");
+//                    continue;
+//                }
+//            } catch (InputMismatchException | NumberFormatException e) {
+//                System.out.println("Wrong input! Try again.");
+//                System.out.println("You should enter a number in range [-9223372036854775808; 9223372036854775807], it shouldn't be decimal.");
+//                continue;
+//            }
+//            break;
+//        }
+//        return value;
+//    }
+//}
Index: src/main/java/ru/sikion/fileLogic/Saver.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.sikion.fileLogic;\r\n\r\nimport java.beans.PropertyEditor;\r\nimport java.beans.PropertyEditorManager;\r\nimport java.lang.reflect.Field;\r\nimport java.util.*;\r\n\r\n/**\r\n * Abstract saver class. (Under construction)\r\n */\r\npublic class Saver<T extends Collection<E>, E> {\r\n\r\n\r\n    private final Class<E> fullClassOfElement;\r\n\r\n\r\n    /**\r\n     * Initializer of fileLogic.Saver class.\r\n     *\r\n     * @param eClass Class of <code>E</code>. Should be provided due to Java's generic types restriction.\r\n     */\r\n    public Saver(Class<E> eClass)\r\n    {\r\n        fullClassOfElement = eClass;\r\n    }\r\n\r\n    /**\r\n     * Saves provided collection into file by environment key.\r\n     *\r\n     * @param collection Current collection to save\r\n     * @param envKey Environment key to filepath\r\n     */\r\n    public void saveCollection(T collection, String envKey)\r\n    {\r\n        String xmlPath = System.getenv(envKey);\r\n\r\n        BaseWriter writer = new CSVWriter();\r\n\r\n        writer.writeToFile(xmlPath, getValues(collection));\r\n    }\r\n\r\n    LinkedHashMap<String[], String> result;\r\n    private LinkedHashMap<String[], String> getValues(T collection) {\r\n        result = new LinkedHashMap<>();\r\n\r\n        int iter = 0;\r\n        for (E obj : collection) {\r\n            Field[] fields = obj.getClass().getDeclaredFields();\r\n            //.out.println(Arrays.toString(fields));\r\n            for (Field field : fields) {\r\n                try {\r\n                    ArrayList<String> address = new ArrayList<>();\r\n                    String[] canonicalNameSplitted = fullClassOfElement.getCanonicalName().toLowerCase().split(\"\\\\.\");\r\n                    address.add(canonicalNameSplitted[canonicalNameSplitted.length - 1] + iter);\r\n                    addToCollection(obj, field, address);\r\n                } catch (IllegalAccessException ignored) {\r\n                }\r\n            }\r\n            iter++;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private void addToCollection(Object obj, Field field, ArrayList<String> currentAddress) throws IllegalAccessException {\r\n        field.setAccessible(true);\r\n        Object objValue = field.get(obj);\r\n\r\n        if (Wrapper.isWrapperType(field.getType()))\r\n        {\r\n            // primitive\r\n            String value = convert(field.getType(), objValue);\r\n\r\n            String fieldNameToAddress = field.getName();\r\n            currentAddress.add(fieldNameToAddress);\r\n            String[] address = new String[currentAddress.size()];\r\n\r\n            for (int i = 0; i < address.length; i++)\r\n            {\r\n                address[i] = currentAddress.get(i);\r\n            }\r\n\r\n            result.put(address, value);\r\n        }\r\n        else if (objValue != null)\r\n        {\r\n            Field[] fields = field.getType().getDeclaredFields();\r\n            currentAddress.add(field.getName());\r\n            for (Field fieldType : fields)\r\n            {\r\n                addToCollection(objValue, fieldType, currentAddress);\r\n                currentAddress.remove(currentAddress.size() - 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    private String convert(Class<?> targetType, Object obj) {\r\n        PropertyEditor editor = PropertyEditorManager.findEditor(targetType);\r\n        editor.setValue(obj);\r\n        return editor.getAsText();\r\n    }\r\n\r\n    private static class Wrapper\r\n    {\r\n        private static final Set<Class<?>> WRAPPER_TYPES = getWrapperTypes();\r\n\r\n        public static boolean isWrapperType(Class<?> clazz)\r\n        {\r\n            return WRAPPER_TYPES.contains(clazz);\r\n        }\r\n\r\n        private static Set<Class<?>> getWrapperTypes()\r\n        {\r\n            Set<Class<?>> ret = new HashSet<>();\r\n            ret.add(Boolean.class);\r\n            ret.add(Character.class);\r\n            ret.add(Byte.class);\r\n            ret.add(Short.class);\r\n            ret.add(Integer.class);\r\n            ret.add(Long.class);\r\n            ret.add(Float.class);\r\n            ret.add(Double.class);\r\n            ret.add(Void.class);\r\n            ret.add(Date.class);\r\n            ret.add(String.class);\r\n            ret.add(boolean.class);\r\n            ret.add(char.class);\r\n            ret.add(byte.class);\r\n            ret.add(short.class);\r\n            ret.add(int.class);\r\n            ret.add(long.class);\r\n            ret.add(float.class);\r\n            ret.add(double.class);\r\n            return ret;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/sikion/fileLogic/Saver.java b/src/main/java/ru/sikion/fileLogic/Saver.java
--- a/src/main/java/ru/sikion/fileLogic/Saver.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ b/src/main/java/ru/sikion/fileLogic/Saver.java	(date 1682576077388)
@@ -34,7 +34,7 @@
     {
         String xmlPath = System.getenv(envKey);
 
-        BaseWriter writer = new CSVWriter();
+        BaseWriter writer = new XMLWriter();
 
         writer.writeToFile(xmlPath, getValues(collection));
     }
Index: src/main/java/ru/sikion/commandManager/commands/ShowCommand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.sikion.commandManager.commands;\r\n\r\nimport ru.sikion.models.Worker;\r\nimport ru.sikion.models.handlers.CollectionHandler;\r\nimport ru.sikion.models.handlers.WorkerHandler;\r\n\r\nimport java.util.HashSet;\r\n\r\n/**\r\n * Shows every element of the collection in toString() interpretation.\r\n *\r\n * @since 1.0\r\n * @author Sikion\r\n */\r\npublic class ShowCommand implements BaseCommand {\r\n    @Override\r\n    public String getName() {\r\n        return \"show\";\r\n    }\r\n\r\n    @Override\r\n    public String getDescr() {\r\n        return \"Shows every element of the collection in toString() interpretation.\";\r\n    }\r\n\r\n    @Override\r\n    public void execute(String[] args) {\r\n        CollectionHandler<HashSet<Worker>, Worker> handler = WorkerHandler.getInstance();\r\n\r\n        handler.getCollection().forEach(System.out::println);\r\n\r\n        if (handler.getCollection().isEmpty())\r\n        {\r\n            System.out.println(\"There's nothing to show.\");\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/sikion/commandManager/commands/ShowCommand.java b/src/main/java/ru/sikion/commandManager/commands/ShowCommand.java
--- a/src/main/java/ru/sikion/commandManager/commands/ShowCommand.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ b/src/main/java/ru/sikion/commandManager/commands/ShowCommand.java	(date 1682571113123)
@@ -2,7 +2,7 @@
 
 import ru.sikion.models.Worker;
 import ru.sikion.models.handlers.CollectionHandler;
-import ru.sikion.models.handlers.WorkerHandler;
+import ru.sikion.models.handlers.WorkersHandler;
 
 import java.util.HashSet;
 
@@ -25,7 +25,7 @@
 
     @Override
     public void execute(String[] args) {
-        CollectionHandler<HashSet<Worker>, Worker> handler = WorkerHandler.getInstance();
+        CollectionHandler<HashSet<Worker>, Worker> handler = WorkersHandler.getInstance();
 
         handler.getCollection().forEach(System.out::println);
 
Index: src/main/java/ru/sikion/fileLogic/Loader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.sikion.fileLogic;\r\n\r\nimport ru.sikion.fileLogic.editors.DateEditor;\r\n\r\nimport java.beans.PropertyEditor;\r\nimport java.beans.PropertyEditorManager;\r\nimport java.io.IOException;\r\nimport java.lang.reflect.Field;\r\nimport java.nio.charset.CharacterCodingException;\r\nimport java.nio.file.AccessDeniedException;\r\nimport java.time.format.DateTimeParseException;\r\nimport java.util.*;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\nimport java.util.regex.Pattern;\r\n\r\n/**\r\n * Abstract loader class. It uses <code>java.lang.reflect</code> API for changing fields taken from XML file\r\n * and converted by <code>java.beans.PropertyEditor</code>. It fills Elements of type E to collection of type T\r\n * @param <T> Collection to fill\r\n * @param <E> Type of collection elements\r\n * @see java.lang.reflect\r\n * @see PropertyEditor\r\n * @since 1.0\r\n * @author Sikion\r\n */\r\n\r\npublic class Loader<T extends Collection<E>, E> {\r\n\r\n    private static final Logger myLogger = Logger.getLogger(\"com.github.Sikion.lab5\");\r\n\r\n    private T resultCollection;\r\n\r\n    private final Class<E> fullClassOfElement;\r\n\r\n    /**\r\n     * Initializer of fileLogic.Loader class.\r\n     *\r\n     * @param tClass Class of <code>T</code>. Should be provided due to Java's generic types restriction.\r\n     * @param eClass Class of <code>E</code>. Should be provided due to Java's generic types restriction.\r\n     */\r\n    public Loader(Class<T> tClass, Class<E> eClass)\r\n    {\r\n        setupConverter();\r\n        fullClassOfElement = eClass;\r\n        try {\r\n            resultCollection = tClass.newInstance();\r\n            buildingObject = buildElement();\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            myLogger.log(Level.SEVERE, \"В программе возникла проблема: \" + e);\r\n        }\r\n    }\r\n\r\n\r\n    private static void setupConverter() {\r\n        PropertyEditorManager.registerEditor(Date.class, DateEditor.class);\r\n    }\r\n\r\n    /**\r\n     * Manually register editor for your datatype. Call this method before parsing XML.\r\n     *\r\n     * @param typeToEdit Type to register in editor\r\n     * @param editor Editor of type. Should implement PropertyEditor interface\r\n     *\r\n     * @see PropertyEditor\r\n     */\r\n    public static void setupConverter(Class<?> typeToEdit, Class<? extends PropertyEditor> editor)\r\n    {\r\n        PropertyEditorManager.registerEditor(typeToEdit, editor);\r\n    }\r\n\r\n    /**\r\n     * Fill collection with elements from XML file.\r\n     * XML filepath will be taken from Environment variable\r\n     *\r\n     * @param envKey Key of System env. var to XML filepath\r\n     * @return Filled collection of type T\r\n     */\r\n    public T loadFromXMLbyEnvKey(String envKey) {\r\n        String xmlPath = System.getenv(envKey);\r\n        if (xmlPath == null) {\r\n            myLogger.log(Level.SEVERE, \"Отсутствует переменная окружения с путем к загрузочному файлу!\");\r\n            myLogger.log(Level.INFO, \"Задайте переменную окружения с именем \\\"lab5\\\", поместив туда полный путь к XML файлу.\");\r\n            myLogger.log(Level.WARNING, \"Выполнение программы не может быть продолжено.\");\r\n            System.exit(-1);\r\n        }\r\n\r\n        BaseReader reader = new CSVReader();\r\n\r\n        resultCollection = loadFromFile(xmlPath, reader);\r\n\r\n        return resultCollection;\r\n    }\r\n\r\n    /**\r\n     * Abstract method to read any collection from any file by any reader.\r\n     * @param path Path to file\r\n     * @param reader File reader\r\n     * @return Collection with elements matched by file\r\n     */\r\n    public T loadFromFile(String path, BaseReader reader)\r\n    {\r\n        try {\r\n            LinkedHashMap<String[], String> parsedValues = reader.readFromFile(path);\r\n\r\n            if (!parsedValues.isEmpty())\r\n                fillCollection(parsedValues);\r\n\r\n        } catch (AccessDeniedException ex) {\r\n            System.out.println(\"/ ! \\\\ File reading failed because application cannot access to this file. Contact your administrator and ask him to write \\'sudo chmod 755 $lab5\\'\");\r\n        } catch (CharacterCodingException ex) {\r\n            System.out.println(\"/ ! \\\\ File reading filed because system cannot understand file-coding. Contact your administrator.\");\r\n        } catch (IOException e) {\r\n            System.out.println(\"/ ! \\\\ Something went wrong during reading the file. Loading was skipped...\");\r\n            myLogger.log(Level.SEVERE, \"Во время работы с вводом-выводом произошла непредвиденная ошибка! \" + e.getMessage());\r\n        } catch (Exception e) {\r\n            System.out.println(\"/ ! \\\\ File reading failed due to broken XML file. Fix it manually & try again.\");\r\n        }\r\n        return resultCollection;\r\n    }\r\n\r\n    private void fillCollection(LinkedHashMap<String[], String> parsedValues) {\r\n        parsedValues.forEach(this::addFieldToElement);\r\n\r\n        myLogger.log(Level.FINE, \"adding last...\");\r\n        addObjectToCollection(buildingObject); // add last\r\n    }\r\n\r\n    private int latestKnownIndex = 0;\r\n    private E buildingObject;\r\n\r\n    private void addFieldToElement(String[] pathToField, String s) {\r\n        // match the correct object\r\n        var matcher = Pattern.compile(\"[0-9]+?\").matcher(pathToField[1]);\r\n        int currentIndex;\r\n        if (matcher.find())\r\n        {\r\n            currentIndex = Integer.parseInt(matcher.group());\r\n        }\r\n        else {\r\n            myLogger.log (Level.WARNING, \"Поле имеет некорректный адрес и будет пропущено. \" + Arrays.toString(pathToField));\r\n            return;\r\n        }\r\n        if (latestKnownIndex != currentIndex)\r\n        {\r\n            latestKnownIndex = currentIndex;\r\n            if (resultCollection.size() > currentIndex)\r\n            {\r\n                // object exists\r\n                Iterator<E> iterator = resultCollection.iterator();\r\n                for (int i = 0; i <= currentIndex; i++)\r\n                {\r\n                    buildingObject = iterator.next();\r\n                }\r\n            }\r\n            else\r\n            {\r\n                // build new\r\n                myLogger.log(Level.FINE, \"adding object...\");\r\n                addObjectToCollection(buildingObject);\r\n                buildingObject = buildElement();\r\n            }\r\n        }\r\n\r\n        // set field value\r\n\r\n        for (int i = 2; i < pathToField.length; i++)\r\n        {\r\n            try {\r\n                setField(fullClassOfElement, pathToField, 2, s, buildingObject);\r\n\r\n            } catch (NoSuchFieldException | InstantiationException | IllegalAccessException e) {\r\n                myLogger.log(Level.SEVERE, \"Поле не было обнаружено: \" + e);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void addObjectToCollection(E buildingObject) {\r\n        resultCollection.add(buildingObject);\r\n    }\r\n\r\n    private <U> void setField (Class<?> currentType, String[] fullPath, int currentIndex, String value, U object) throws NoSuchFieldException, InstantiationException, IllegalAccessException {\r\n        Field fieldToSet = currentType.getDeclaredField(fullPath[currentIndex++]);\r\n        fieldToSet.setAccessible(true);\r\n        Class<U> nextType = (Class<U>) fieldToSet.getType();\r\n        if (currentIndex != fullPath.length)\r\n        {\r\n            U nextObject = (U) fieldToSet.get(object);\r\n            if (nextObject == null)\r\n            {\r\n                nextObject = nextType.newInstance();\r\n                fieldToSet.set(object, nextObject);\r\n            }\r\n            setField(nextType, fullPath, currentIndex, value, nextObject);\r\n        }\r\n        else\r\n        {\r\n            try\r\n            {\r\n                fieldToSet.set(object, convert(nextType, value));\r\n            }\r\n            catch (NullPointerException | NumberFormatException | DateTimeParseException e)\r\n            {\r\n                myLogger.log(Level.WARNING, \"XML файл поврежден. Строка с данными \" + value + \" (Адрес: \" + Arrays.toString(fullPath) + \") была пропущена.\");\r\n                myLogger.log(Level.INFO, \"Если вы считаете, что произошла ошибка, добавьте в регистр обработчик. Взгляните на Loader.setupConverter в Javadoc или свяжитесь с администратором.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private Object convert(Class<?> targetType, String text) {\r\n        PropertyEditor editor = PropertyEditorManager.findEditor(targetType);\r\n        editor.setAsText(text);\r\n        return editor.getValue();\r\n    }\r\n\r\n    private E buildElement() {\r\n\r\n        E result = null;\r\n        try\r\n        {\r\n            result = fullClassOfElement.newInstance();\r\n        } catch (InstantiationException e) {\r\n            myLogger.log(Level.SEVERE, \"При инициализации элемента возникла проблема! \" + e.getMessage());\r\n        } catch (IllegalAccessException e) {\r\n            myLogger.log(Level.SEVERE, \"Ошибка доступа! \" + e.getMessage());\r\n        }\r\n        return result;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/sikion/fileLogic/Loader.java b/src/main/java/ru/sikion/fileLogic/Loader.java
--- a/src/main/java/ru/sikion/fileLogic/Loader.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ b/src/main/java/ru/sikion/fileLogic/Loader.java	(date 1682576077360)
@@ -87,7 +87,7 @@
             System.exit(-1);
         }
 
-        BaseReader reader = new CSVReader();
+        BaseReader reader = new XMLReader();
 
         resultCollection = loadFromFile(xmlPath, reader);
 
Index: src/main/java/ru/sikion/commandManager/commands/AddCommand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.sikion.commandManager.commands;\r\n\r\nimport ru.sikion.exceptions.BuildObjectException;\r\nimport ru.sikion.models.handlers.*;\r\nimport ru.sikion.models.handlers.userMode.RouteCLIHandler;\r\nimport ru.sikion.models.Worker;\r\n\r\nimport java.util.HashSet;\r\n\r\n/**\r\n * Adds new element to collection.\r\n *\r\n * @since 1.0\r\n * @author Sikion\r\n */\r\npublic class AddCommand implements BaseCommand {\r\n    ModuleHandler<Worker> handler;\r\n\r\n    /**\r\n     * Default constructor with handler from 1.0\r\n     */\r\n    public AddCommand()\r\n    {\r\n        handler = new RouteCLIHandler();\r\n    }\r\n    /**\r\n     * Provides choosing handler\r\n     *\r\n     * @param handler ModuleHandler for operating\r\n     */\r\n    public AddCommand(ModuleHandler<Worker> handler)\r\n    {\r\n        this.handler = handler;\r\n    }\r\n\r\n    @Override\r\n    public String getName() {\r\n        return \"add\";\r\n    }\r\n\r\n    @Override\r\n    public String getDescr() {\r\n        return \"Adds new element to collection.\";\r\n    }\r\n\r\n    @Override\r\n    public String getArgs() {\r\n        return \"{element}\";\r\n    }\r\n\r\n    @Override\r\n    public void execute(String[] args) throws BuildObjectException {\r\n        CollectionHandler<HashSet<Worker>, Worker> collectionHandler = WorkerHandler.getInstance();\r\n\r\n        collectionHandler.addElementToCollection(handler.buildObject());\r\n\r\n        System.out.println(\"Element added!\");\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/sikion/commandManager/commands/AddCommand.java b/src/main/java/ru/sikion/commandManager/commands/AddCommand.java
--- a/src/main/java/ru/sikion/commandManager/commands/AddCommand.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ b/src/main/java/ru/sikion/commandManager/commands/AddCommand.java	(date 1682571804470)
@@ -2,7 +2,7 @@
 
 import ru.sikion.exceptions.BuildObjectException;
 import ru.sikion.models.handlers.*;
-import ru.sikion.models.handlers.userMode.RouteCLIHandler;
+import ru.sikion.models.handlers.userMode.WorkerCLIHandler;
 import ru.sikion.models.Worker;
 
 import java.util.HashSet;
@@ -21,7 +21,7 @@
      */
     public AddCommand()
     {
-        handler = new RouteCLIHandler();
+        handler = new WorkerCLIHandler();
     }
     /**
      * Provides choosing handler
@@ -50,7 +50,7 @@
 
     @Override
     public void execute(String[] args) throws BuildObjectException {
-        CollectionHandler<HashSet<Worker>, Worker> collectionHandler = WorkerHandler.getInstance();
+        CollectionHandler<HashSet<Worker>, Worker> collectionHandler = WorkersHandler.getInstance();
 
         collectionHandler.addElementToCollection(handler.buildObject());
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"5eabd8a4-3742-4572-a528-fa2de2f970d3\" name=\"Changes\" comment=\"Add validators\">\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/META-INF/MANIFEST.MF\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/CommandExecutor.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/CommandManager.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/CommandMode.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/commands/AddCommand.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/commands/BaseCommand.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/commands/ClearCommand.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/commands/ExecuteScriptCommand.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/commands/ExitCommand.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/commands/HelpCommand.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/commands/InfoCommand.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/commands/MinByCreationDateCommand.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/commands/RemoveByIdCommand.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/commands/RemoveGreaterCommand.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/commands/SaveCommand.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/commands/ShowCommand.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/commands/UpdateCommand.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/exceptions/BuildObjectException.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/exceptions/CommandInterruptedException.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/exceptions/StreamInterruptedException.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/exceptions/UnknownCommandException.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/exceptions/WrongAmountOfArgumentsException.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/fileLogic/BaseReader.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/fileLogic/BaseWriter.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/fileLogic/CSVReader.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/fileLogic/CSVWriter.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/fileLogic/Loader.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/fileLogic/Saver.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/fileLogic/editors/DateEditor.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/main/Main.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/main/Utilities.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/models/Coordinates.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/models/Person.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/models/Worker.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/models/comparators/RouteComparator.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/models/comparators/RouteDistanceComparator.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/models/handlers/CollectionHandler.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/models/handlers/ModuleHandler.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/models/handlers/WorkerHandler.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/models/handlers/WorkerHandlers.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/models/handlers/nonUserMode/RouteNonCLIHandler.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/models/handlers/userMode/CoordinatesCLIHandler.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/models/handlers/userMode/LocationCLIHandler.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/models/handlers/userMode/RouteCLIHandler.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/CoordYValidator.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/IdValidator.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/WorkerValidator.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/ru/sikion/Coordinates.java\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/ru/sikion/Country.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/models/Identity/Country.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/ru/sikion/EyeColor.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/models/Identity/EyeColor.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/ru/sikion/HairColor.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/models/Identity/HairColor.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/ru/sikion/Main.java\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/ru/sikion/Person.java\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/ru/sikion/Status.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/models/Identity/Status.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/ru/sikion/Worker.java\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/ru/sikion/models/Check.java\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/CoordinatesValidator.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/CoordXValidator.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/EndDateValidator.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/EndDateValidator.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/HairColorValidator.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/HairColorValidator.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/NameValidator.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/NameValidator.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/PassportIDValidator.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/PassportIDValidator.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/SalaryValidator.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/SalaryValidator.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/StartDateValidator.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/StartDateValidator.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/StatusValidator.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/StatusValidator.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/Validator.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/Validator.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Interface\" />\r\n        <option value=\"Enum\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"Test\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"HighlightingSettingsPerFile\">\r\n    <setting file=\"file://$PROJECT_DIR$/src/main/java1.ru.sikion/models/validators/IdValidator.java\" root0=\"FORCE_HIGHLIGHTING\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2MSS4yY6NzM2cq4G5O9DnkXvJv0\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"ASKED_ADD_EXTERNAL_FILES\": \"true\",\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\r\n    \"WebServerToolWindowFactoryState\": \"false\",\r\n    \"git-widget-placeholder\": \"PreFinal\",\r\n    \"last_opened_file_path\": \"D:/lab_05/src/main/java/ru/sikion\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"project.structure.last.edited\": \"Modules\",\r\n    \"project.structure.proportion\": \"0.15\",\r\n    \"project.structure.side.proportion\": \"0.2\",\r\n    \"settings.editor.selected.configurable\": \"preferences.pluginManager\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  },\r\n  \"keyToStringList\": {\r\n    \"com.intellij.ide.scratch.ScratchImplUtil$2/New Scratch File\": [\r\n      \"JAVA\"\r\n    ]\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\lab_05\\src\\main\\java\\ru\\sikion\" />\r\n      <recent name=\"D:\\lab_05\\src1\\models\\validators\" />\r\n      <recent name=\"D:\\lab_05\\src1\" />\r\n      <recent name=\"D:\\lab_05\\src\\main\\java\\ru\\sikion\\models\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\lab_05\\src\\main\\java1.ru.sikion\" />\r\n      <recent name=\"D:\\lab_05\\src1\\models\\Identity\" />\r\n      <recent name=\"D:\\lab_05\\src1\\models\" />\r\n      <recent name=\"D:\\lab_05\\src\\main\\java\\ru\\sikion\" />\r\n    </key>\r\n    <key name=\"CopyClassDialog.RECENTS_KEY\">\r\n      <recent name=\"ru.sikion.models.validators\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"ru.sikion.Main\" />\r\n      <module name=\"lab_05\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"ru.sikion.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.Main\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"5eabd8a4-3742-4572-a528-fa2de2f970d3\" name=\"Changes\" comment=\"\" />\r\n      <created>1677759302726</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1677759302726</updated>\r\n      <workItem from=\"1677759303780\" duration=\"2298000\" />\r\n      <workItem from=\"1677764427369\" duration=\"3758000\" />\r\n      <workItem from=\"1677768767810\" duration=\"234000\" />\r\n      <workItem from=\"1677769020794\" duration=\"2215000\" />\r\n      <workItem from=\"1678043233381\" duration=\"630000\" />\r\n      <workItem from=\"1678894207634\" duration=\"618000\" />\r\n      <workItem from=\"1678894844312\" duration=\"440000\" />\r\n      <workItem from=\"1678895366756\" duration=\"27000\" />\r\n      <workItem from=\"1678895408186\" duration=\"10000\" />\r\n      <workItem from=\"1678895423840\" duration=\"143000\" />\r\n      <workItem from=\"1678896096144\" duration=\"83000\" />\r\n      <workItem from=\"1678896192731\" duration=\"11000\" />\r\n      <workItem from=\"1678896245864\" duration=\"643000\" />\r\n      <workItem from=\"1678896907362\" duration=\"7974000\" />\r\n      <workItem from=\"1678908666368\" duration=\"1446000\" />\r\n      <workItem from=\"1678912007741\" duration=\"381000\" />\r\n      <workItem from=\"1681200928275\" duration=\"1245000\" />\r\n      <workItem from=\"1681204464625\" duration=\"3193000\" />\r\n      <workItem from=\"1681209946988\" duration=\"26000\" />\r\n      <workItem from=\"1681210038421\" duration=\"21000\" />\r\n      <workItem from=\"1681210065149\" duration=\"89000\" />\r\n      <workItem from=\"1681210168562\" duration=\"2928000\" />\r\n      <workItem from=\"1681338023350\" duration=\"375000\" />\r\n      <workItem from=\"1681338445124\" duration=\"620000\" />\r\n      <workItem from=\"1681339082825\" duration=\"10468000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Create project\">\r\n      <created>1678043317673</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1678043317673</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Create project\">\r\n      <created>1678043351110</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1678043351110</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"First push\">\r\n      <created>1678043808152</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1678043808152</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Add validators\">\r\n      <created>1678910082836</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1678910082836</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Add validators\">\r\n      <created>1681209260203</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681209260203</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"6\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"Create project\" />\r\n    <MESSAGE value=\"First push\" />\r\n    <MESSAGE value=\"Add validators\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Add validators\" />\r\n  </component>\r\n  <component name=\"XSLT-Support.FileAssociations.UIState\">\r\n    <expand />\r\n    <select />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ b/.idea/workspace.xml	(date 1682578656196)
@@ -4,73 +4,101 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="5eabd8a4-3742-4572-a528-fa2de2f970d3" name="Changes" comment="Add validators">
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/META-INF/MANIFEST.MF" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/CommandExecutor.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/CommandManager.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/CommandMode.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/commands/AddCommand.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/commands/BaseCommand.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/commands/ClearCommand.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/commands/ExecuteScriptCommand.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/commands/ExitCommand.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/commands/HelpCommand.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/commands/InfoCommand.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/commands/MinByCreationDateCommand.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/commands/RemoveByIdCommand.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/commands/RemoveGreaterCommand.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/commands/SaveCommand.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/commands/ShowCommand.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/commands/UpdateCommand.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/exceptions/BuildObjectException.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/exceptions/CommandInterruptedException.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/exceptions/StreamInterruptedException.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/exceptions/UnknownCommandException.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/exceptions/WrongAmountOfArgumentsException.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/fileLogic/BaseReader.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/fileLogic/BaseWriter.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/fileLogic/CSVReader.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/fileLogic/CSVWriter.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/fileLogic/Loader.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/fileLogic/Saver.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/fileLogic/editors/DateEditor.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/main/Main.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/main/Utilities.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/models/Coordinates.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/models/Person.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/models/Worker.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/models/comparators/RouteComparator.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/models/comparators/RouteDistanceComparator.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/models/handlers/CollectionHandler.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/models/handlers/ModuleHandler.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/models/handlers/WorkerHandler.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/models/handlers/WorkerHandlers.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/models/handlers/nonUserMode/RouteNonCLIHandler.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/models/handlers/userMode/CoordinatesCLIHandler.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/models/handlers/userMode/LocationCLIHandler.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/models/handlers/userMode/RouteCLIHandler.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/CoordYValidator.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/IdValidator.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/WorkerValidator.java" afterDir="false" />
+    <list default="true" id="5eabd8a4-3742-4572-a528-fa2de2f970d3" name="Changes" comment="Commit version 1.2">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/Coordinates.java" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/Country.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/models/Identity/Country.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/EyeColor.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/models/Identity/EyeColor.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/HairColor.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/models/Identity/HairColor.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/Main.java" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/Person.java" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/Status.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/models/Identity/Status.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/Worker.java" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/models/Check.java" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/CoordinatesValidator.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/CoordXValidator.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/EndDateValidator.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/EndDateValidator.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/HairColorValidator.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/HairColorValidator.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/NameValidator.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/NameValidator.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/PassportIDValidator.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/PassportIDValidator.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/SalaryValidator.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/SalaryValidator.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/StartDateValidator.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/StartDateValidator.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/StatusValidator.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/StatusValidator.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/Validator.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/Validator.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/pom.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/MANIFEST.MF" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/Main.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/Utilities.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/CommandExecutor.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/CommandManager.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/CommandMode.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/AddCommand.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/BaseCommand.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/ClearCommand.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/ExecuteScriptCommand.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/ExitCommand.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/HelpCommand.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/InfoCommand.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/MinByCreationDateCommand.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/RemoveByIdCommand.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/RemoveGreaterCommand.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/SaveCommand.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/ShowCommand.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/commandManager/commands/UpdateCommand.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/exceptions/BuildObjectException.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/exceptions/CommandInterruptedException.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/exceptions/StreamInterruptedException.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/exceptions/UnknownCommandException.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/exceptions/WrongAmountOfArgumentsException.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/fileLogic/BaseReader.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/fileLogic/BaseWriter.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/fileLogic/CSVReader.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/fileLogic/XMLReader.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/fileLogic/CSVWriter.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/fileLogic/XMLWriter.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/fileLogic/Loader.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/fileLogic/Saver.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/fileLogic/editors/DateEditor.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/models/Coordinates.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/models/Identity/Country.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/models/Identity/EyeColor.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/models/Identity/HairColor.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/models/Identity/Status.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/models/Person.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/models/Worker.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/models/comparators/WorkerComparator.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/models/handlers/CollectionHandler.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/models/handlers/ModuleHandler.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/models/handlers/WorkerHandlers.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/models/handlers/WorkersHandler.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/models/handlers/WorkersHandler.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/models/handlers/nonUserMode/WorkerNonCLIHandler.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/models/handlers/userMode/CoordinatesCLIHandler.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/models/handlers/userMode/LocationCLIHandler.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/models/handlers/userMode/RouteCLIHandler.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/CoordXValidator.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/CoordYValidator.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/EndDateValidator.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/EyeColorValidator.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/HairColorValidator.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/IdValidator.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/NameValidator.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/NationalityValidator.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/SalaryValidator.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/StartDateValidator.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/StatusValidator.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/Validator.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/src/main/java/ru/sikion/models/validators/WorkerValidator.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/Задание1.png" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/Задание2.png" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/Задание3.png" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/lab_05-PreFinal/Задание4.png" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/META-INF/MANIFEST.MF" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/META-INF/MANIFEST.MF" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/CommandManager.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/CommandManager.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/commands/AddCommand.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/commands/AddCommand.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/commands/ClearCommand.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/commands/ClearCommand.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/commands/InfoCommand.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/commands/InfoCommand.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/commands/MinByCreationDateCommand.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/commands/MinByCreationDateCommand.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/commands/RemoveByIdCommand.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/commands/RemoveByIdCommand.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/commands/SaveCommand.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/commands/SaveCommand.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/commands/ShowCommand.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/commands/ShowCommand.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/commands/UpdateCommand.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/commandManager/commands/UpdateCommand.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/fileLogic/CSVReader.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/fileLogic/CSVWriter.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/fileLogic/Loader.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/fileLogic/Loader.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/fileLogic/Saver.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/fileLogic/Saver.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/main/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/main/Main.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/main/Utilities.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/main/Utilities.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/models/Worker.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/models/Worker.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/models/comparators/RouteComparator.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/models/comparators/WorkerComparator.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/models/handlers/CollectionHandler.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/models/handlers/CollectionHandler.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/models/handlers/WorkerHandler.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/models/handlers/WorkerHandlers.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/models/handlers/WorkerHandlers.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/models/handlers/nonUserMode/RouteNonCLIHandler.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/models/handlers/nonUserMode/RouteNonCLIHandler.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/models/handlers/userMode/CoordinatesCLIHandler.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/models/handlers/userMode/CoordinatesCLIHandler.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/models/handlers/userMode/LocationCLIHandler.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/models/handlers/userMode/LocationCLIHandler.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/models/handlers/userMode/RouteCLIHandler.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/models/handlers/userMode/WorkerCLIHandler.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/IdValidator.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/IdValidator.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/PassportIDValidator.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/WorkerValidator.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ru/sikion/models/validators/WorkerValidator.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -89,7 +117,7 @@
   <component name="Git.Settings">
     <option name="RECENT_BRANCH_BY_REPOSITORY">
       <map>
-        <entry key="$PROJECT_DIR$" value="Test" />
+        <entry key="$PROJECT_DIR$" value="PreFinal" />
       </map>
     </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
@@ -115,12 +143,13 @@
     "RunOnceActivity.ShowReadmeOnStart": "true",
     "SHARE_PROJECT_CONFIGURATION_FILES": "true",
     "WebServerToolWindowFactoryState": "false",
-    "git-widget-placeholder": "PreFinal",
-    "last_opened_file_path": "D:/lab_05/src/main/java/ru/sikion",
+    "git-widget-placeholder": "Test13",
+    "last_opened_file_path": "D:/lab_05/src/main/java/ru/sikion/models/handlers/userMode",
     "node.js.detected.package.eslint": "true",
     "node.js.detected.package.tslint": "true",
     "node.js.selected.package.eslint": "(autodetect)",
     "node.js.selected.package.tslint": "(autodetect)",
+    "nodejs_package_manager_path": "npm",
     "project.structure.last.edited": "Modules",
     "project.structure.proportion": "0.15",
     "project.structure.side.proportion": "0.2",
@@ -135,12 +164,14 @@
 }]]></component>
   <component name="RecentsManager">
     <key name="CopyFile.RECENT_KEYS">
+      <recent name="D:\lab_05\src\main\java\ru\sikion\models\handlers\userMode" />
       <recent name="D:\lab_05\src\main\java\ru\sikion" />
       <recent name="D:\lab_05\src1\models\validators" />
       <recent name="D:\lab_05\src1" />
       <recent name="D:\lab_05\src\main\java\ru\sikion\models" />
     </key>
     <key name="MoveFile.RECENT_KEYS">
+      <recent name="D:\lab_05\src\main\java\ru\sikion\models\handlers\userMode" />
       <recent name="D:\lab_05\src\main\java1.ru.sikion" />
       <recent name="D:\lab_05\src1\models\Identity" />
       <recent name="D:\lab_05\src1\models" />
@@ -150,13 +181,26 @@
       <recent name="ru.sikion.models.validators" />
     </key>
   </component>
-  <component name="RunManager">
+  <component name="RunManager" selected="Application.ru.sikion.main.Main">
     <configuration name="Main" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
       <option name="MAIN_CLASS_NAME" value="ru.sikion.Main" />
       <module name="lab_05" />
       <extension name="coverage">
         <pattern>
           <option name="PATTERN" value="ru.sikion.*" />
+          <option name="ENABLED" value="true" />
+        </pattern>
+      </extension>
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <configuration name="ru.sikion.main.Main" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="ru.sikion.main.Main" />
+      <module name="lab_05" />
+      <extension name="coverage">
+        <pattern>
+          <option name="PATTERN" value="ru.sikion.main.*" />
           <option name="ENABLED" value="true" />
         </pattern>
       </extension>
@@ -166,6 +210,7 @@
     </configuration>
     <recent_temporary>
       <list>
+        <item itemvalue="Application.ru.sikion.main.Main" />
         <item itemvalue="Application.Main" />
       </list>
     </recent_temporary>
@@ -202,7 +247,17 @@
       <workItem from="1681210168562" duration="2928000" />
       <workItem from="1681338023350" duration="375000" />
       <workItem from="1681338445124" duration="620000" />
-      <workItem from="1681339082825" duration="10468000" />
+      <workItem from="1681339082825" duration="11108000" />
+      <workItem from="1682568344936" duration="555000" />
+      <workItem from="1682568921951" duration="344000" />
+      <workItem from="1682569325904" duration="47000" />
+      <workItem from="1682569599760" duration="30000" />
+      <workItem from="1682569636408" duration="8000" />
+      <workItem from="1682569691762" duration="28000" />
+      <workItem from="1682569758067" duration="17000" />
+      <workItem from="1682569800447" duration="3286000" />
+      <workItem from="1682576032593" duration="338000" />
+      <workItem from="1682576712330" duration="1297000" />
     </task>
     <task id="LOCAL-00001" summary="Create project">
       <created>1678043317673</created>
@@ -239,7 +294,14 @@
       <option name="project" value="LOCAL" />
       <updated>1681209260203</updated>
     </task>
-    <option name="localTasksCounter" value="6" />
+    <task id="LOCAL-00006" summary="Commit version 1.2">
+      <created>1681377698675</created>
+      <option name="number" value="00006" />
+      <option name="presentableId" value="LOCAL-00006" />
+      <option name="project" value="LOCAL" />
+      <updated>1681377698675</updated>
+    </task>
+    <option name="localTasksCounter" value="7" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -250,7 +312,8 @@
     <MESSAGE value="Create project" />
     <MESSAGE value="First push" />
     <MESSAGE value="Add validators" />
-    <option name="LAST_COMMIT_MESSAGE" value="Add validators" />
+    <MESSAGE value="Commit version 1.2" />
+    <option name="LAST_COMMIT_MESSAGE" value="Commit version 1.2" />
   </component>
   <component name="XSLT-Support.FileAssociations.UIState">
     <expand />
Index: src/main/java/ru/sikion/commandManager/commands/ClearCommand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.sikion.commandManager.commands;\r\n\r\nimport ru.sikion.models.Worker;\r\nimport ru.sikion.models.handlers.CollectionHandler;\r\nimport ru.sikion.models.handlers.WorkerHandler;\r\n\r\nimport java.util.HashSet;\r\n\r\n/**\r\n * Clears collection\r\n *\r\n * @since 1.0\r\n * @author Sikion\r\n */\r\npublic class ClearCommand implements BaseCommand {\r\n    @Override\r\n    public String getName() {\r\n        return \"clear\";\r\n    }\r\n\r\n    @Override\r\n    public String getDescr() {\r\n        return \"Clears collection\";\r\n    }\r\n\r\n    @Override\r\n    public void execute(String[] args) {\r\n        CollectionHandler<HashSet<Worker>, Worker> collectionHandler = WorkerHandler.getInstance();\r\n\r\n        collectionHandler.clearCollection();\r\n\r\n        System.out.println(\"Cleared!\");\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/sikion/commandManager/commands/ClearCommand.java b/src/main/java/ru/sikion/commandManager/commands/ClearCommand.java
--- a/src/main/java/ru/sikion/commandManager/commands/ClearCommand.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ b/src/main/java/ru/sikion/commandManager/commands/ClearCommand.java	(date 1682571030114)
@@ -2,7 +2,7 @@
 
 import ru.sikion.models.Worker;
 import ru.sikion.models.handlers.CollectionHandler;
-import ru.sikion.models.handlers.WorkerHandler;
+import ru.sikion.models.handlers.WorkersHandler;
 
 import java.util.HashSet;
 
@@ -25,7 +25,7 @@
 
     @Override
     public void execute(String[] args) {
-        CollectionHandler<HashSet<Worker>, Worker> collectionHandler = WorkerHandler.getInstance();
+        CollectionHandler<HashSet<Worker>, Worker> collectionHandler = WorkersHandler.getInstance();
 
         collectionHandler.clearCollection();
 
Index: src/main/java/ru/sikion/commandManager/commands/InfoCommand.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.sikion.commandManager.commands;\r\n\r\nimport ru.sikion.models.Worker;\r\nimport ru.sikion.models.handlers.CollectionHandler;\r\nimport ru.sikion.models.handlers.WorkerHandler;\r\n\r\nimport java.util.HashSet;\r\n\r\n/**\r\n * Shows information about the collection.\r\n *\r\n * @since 1.0\r\n * @author Sikion\r\n */\r\npublic class InfoCommand implements BaseCommand {\r\n    @Override\r\n    public String getName() {\r\n        return \"info\";\r\n    }\r\n\r\n    @Override\r\n    public String getDescr() {\r\n        return \"Shows information about the collection.\";\r\n    }\r\n\r\n    @Override\r\n    public void execute(String[] args) {\r\n        CollectionHandler<HashSet<Worker>, Worker> handler = WorkerHandler.getInstance();\r\n\r\n        HashSet<Worker> collection = handler.getCollection();\r\n\r\n        System.out.println(\"Now you are operating with collection of type \" + collection.getClass().getName() + \", filled with elements of type \" + handler.getFirstOrNew().getClass().getName());\r\n        System.out.println(\"Size of the collection is \" + collection.size());\r\n        System.out.println(\"Init date: \" + handler.getInitDate());\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/sikion/commandManager/commands/InfoCommand.java b/src/main/java/ru/sikion/commandManager/commands/InfoCommand.java
--- a/src/main/java/ru/sikion/commandManager/commands/InfoCommand.java	(revision 56673c73dbad355574d745669586ac942d6f20ea)
+++ b/src/main/java/ru/sikion/commandManager/commands/InfoCommand.java	(date 1682571043539)
@@ -2,7 +2,7 @@
 
 import ru.sikion.models.Worker;
 import ru.sikion.models.handlers.CollectionHandler;
-import ru.sikion.models.handlers.WorkerHandler;
+import ru.sikion.models.handlers.WorkersHandler;
 
 import java.util.HashSet;
 
@@ -25,7 +25,7 @@
 
     @Override
     public void execute(String[] args) {
-        CollectionHandler<HashSet<Worker>, Worker> handler = WorkerHandler.getInstance();
+        CollectionHandler<HashSet<Worker>, Worker> handler = WorkersHandler.getInstance();
 
         HashSet<Worker> collection = handler.getCollection();
 
